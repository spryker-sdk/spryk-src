<?php

{{ include('Partials/license.twig') }}
namespace {{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\Writer;

use ArrayObject;
use Generated\Shared\Transfer\{{ domainEntity }}CollectionRequestTransfer;
use Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer;
use Generated\Shared\Transfer\{{ domainEntity }}CollectionTransfer;
use Generated\Shared\Transfer\ErrorTransfer;
use Spryker\Zed\Kernel\Persistence\EntityManager\TransactionTrait;
use {{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\IdentifierBuilder\{{ domainEntity }}IdentifierBuilderInterface;
use {{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\Validator\{{ domainEntity }}ValidatorInterface;
use {{ organization }}\Zed\{{ module }}\Persistence\{{ module }}EntityManagerInterface;

class {{ domainEntity }}Updater implements {{ domainEntity }}UpdaterInterface
{
    use TransactionTrait;

    /**
     * @var \{{ organization }}\Zed\{{ module }}\Persistence\{{ module }}EntityManagerInterface
     */
    protected {{ module }}EntityManagerInterface ${{ module | lcfirst }}EntityManager;

    /**
     * @var \{{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\Validator\{{ domainEntity }}ValidatorInterface
     */
    protected {{ domainEntity }}ValidatorInterface ${{ domainEntity | lcfirst }}Validator;

    /**
     * @var \{{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\IdentifierBuilder\{{ domainEntity }}IdentifierBuilderInterface
     */
    protected {{ domainEntity }}IdentifierBuilderInterface ${{ domainEntity | lcfirst }}IdentifierBuilder;

    /**
     * @var \{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Writer\{{ domainEntity }}UpdatePluginInterface[]
     */
    protected array ${{ domainEntity | lcfirst }}PreUpdatePlugins;

    /**
     * @var \{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Writer\{{ domainEntity }}UpdatePluginInterface[]
     */
    protected array ${{ domainEntity | lcfirst }}PostUpdatePlugins;

    /**
     * @param \{{ organization }}\Zed\{{ module }}\Persistence\{{ module }}EntityManagerInterface ${{ module | lcfirst }}EntityManager
     * @param \{{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\Validator\{{ domainEntity }}ValidatorInterface ${{ domainEntity | lcfirst }}Validator
     * @param \{{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\IdentifierBuilder\{{ domainEntity }}IdentifierBuilderInterface
     * @param \{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Writer\{{ domainEntity }}UpdatePluginInterface[] ${{ domainEntity | lcfirst }}PreUpdatePlugins
     * @param \{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Writer\{{ domainEntity }}UpdatePluginInterface[] ${{ domainEntity | lcfirst }}PostUpdatePlugins
     */
    public function __construct(
        {{ module }}EntityManagerInterface ${{ module | lcfirst }}EntityManager,
        {{ domainEntity }}ValidatorInterface ${{ domainEntity | lcfirst }}Validator,
        {{ domainEntity }}IdentifierBuilderInterface ${{ domainEntity | lcfirst }}IdentifierBuilder,
        array ${{ domainEntity | lcfirst }}PreUpdatePlugins,
        array ${{ domainEntity | lcfirst }}PostUpdatePlugins
    ) {
        $this->{{ module | lcfirst }}EntityManager = ${{ module | lcfirst }}EntityManager;
        $this->{{ domainEntity | lcfirst }}Validator = ${{ domainEntity | lcfirst }}Validator;
        $this->{{ domainEntity | lcfirst }}IdentifierBuilder = ${{ domainEntity | lcfirst }}IdentifierBuilder;
        $this->{{ domainEntity | lcfirst }}PreUpdatePlugins = ${{ domainEntity | lcfirst }}PreUpdatePlugins;
        $this->{{ domainEntity | lcfirst }}PostUpdatePlugins = ${{ domainEntity | lcfirst }}PostUpdatePlugins;
    }

    /**
     * @param \Generated\Shared\Transfer\{{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer
     *
     * @return \Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer
     */
    public function update{{ domainEntity }}Collection(
        {{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer
    ): {{ domainEntity }}CollectionResponseTransfer {
        if (${{ domainEntity | lcfirst }}CollectionRequestTransfer->getIsTransactional()) {
            return $this->transactionalUpdate{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);
        }

        return $this->nonTransactionalUpdate{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);
    }

    /**
     * Specification:
     * - Validates ALL entities BEFORE saving, returns as soon as one is invalid.
     * - Saves a list of ALL entities in ONE transaction.
     *
     * @param \Generated\Shared\Transfer\{{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer
     *
     * @return \Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer
     */
    protected function transactionalUpdate{{ domainEntity }}Collection(
        {{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer
    ): {{ domainEntity }}CollectionResponseTransfer {
        ${{ domainEntity | lcfirst }}CollectionResponseTransfer = new {{ domainEntity }}CollectionResponseTransfer();

        // Validate ALL of the entities before update, if one is invalid break and return errors!
        $errorTransfers = $this->{{ domainEntity | lcfirst }}Validator->validateCollectionTransactional(${{ domainEntity | lcfirst }}CollectionRequestTransfer);

        if ($errorTransfers) {
            return ${{ domainEntity | lcfirst }}CollectionResponseTransfer
                ->set{{ domainEntity | pluralize }}(${{ domainEntity | lcfirst }}CollectionRequestTransfer->get{{ domainEntity | pluralize }}())
                ->setErrors(new \ArrayObject($errorTransfers));
        }

        // This will save ALL entities in ONE transaction. If ANY of the entities in the collection fails to be persisted
        // it will roll ALL of them back. And we DON'T catch exceptions here intentionally!
        return $this->getTransactionHandler()->handleTransaction(function () use (${{ domainEntity | lcfirst }}CollectionRequestTransfer, ${{ domainEntity | lcfirst }}CollectionResponseTransfer) {
            return $this->executeUpdate{{ domainEntity | pluralize }}CollectionResponseTransaction(${{ domainEntity | lcfirst }}CollectionRequestTransfer->get{{ domainEntity | pluralize}}(), ${{ domainEntity | lcfirst }}CollectionResponseTransfer);
        });
    }

    /**
     * Specification:
     * - Validates entities before saving, if invalid it won't save the entity and continue with the next one.
     * - Saves ONLY valid entities that passed validation.
     *
     * @param \Generated\Shared\Transfer\{{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer
     *
     * @return \Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer
     */
    protected function nonTransactionalUpdate{{ domainEntity }}Collection(
        {{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer
    ): {{ domainEntity }}CollectionResponseTransfer {
        ${{ domainEntity | lcfirst }}CollectionResponseTransfer = new {{ domainEntity }}CollectionResponseTransfer();
        $valid{{ domainEntity }}CollectionTransfer = $this->validate{{ domainEntity }}CollectionRequestBeforeUpdate(${{ domainEntity | lcfirst }}CollectionRequestTransfer, ${{ domainEntity | lcfirst }}CollectionResponseTransfer);

        // Process only the non-errored entities
        return $this->getTransactionHandler()->handleTransaction(function () use ($valid{{ domainEntity }}CollectionTransfer, ${{ domainEntity | lcfirst }}CollectionResponseTransfer) {
            return $this->executeUpdate{{ domainEntity | pluralize }}CollectionResponseTransaction($valid{{ domainEntity }}CollectionTransfer->get{{ domainEntity | pluralize}}(), ${{ domainEntity | lcfirst }}CollectionResponseTransfer);
        });
    }

   /**
    * @param \Generated\Shared\Transfer\{{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer
    * @param \Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer ${{ domainEntity | lcfirst }}CollectionResponseTransfer
    *
    * @return \Generated\Shared\Transfer\{{ domainEntity }}CollectionTransfer
    */
    protected function validate{{ domainEntity }}CollectionRequestBeforeUpdate({{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer, {{ domainEntity }}CollectionResponseTransfer ${{ domainEntity | lcfirst }}CollectionResponseTransfer): {{ domainEntity }}CollectionTransfer
    {
        $errorTransfers = $this->{{ domainEntity | lcfirst }}Validator->validateCollection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);

        ${{ domainEntity | lcfirst }}IdsWithErrors = [];
        if ($errorTransfers) {
            ${{ domainEntity | lcfirst }}CollectionResponseTransfer->setErrors(new \ArrayObject($errorTransfers));
            ${{ domainEntity | lcfirst }}IdsWithErrors = $this->get{{ domainEntity }}IdsWithErrors($errorTransfers);
        }

        return $this->filterOutInvalid{{ domainEntity | pluralize }}(${{ domainEntity | lcfirst }}CollectionRequestTransfer, ${{ domainEntity | lcfirst }}CollectionResponseTransfer, ${{ domainEntity | lcfirst }}IdsWithErrors);
    }

    /**
    * @param \Generated\Shared\Transfer\{{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer
    * @param \Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer ${{ domainEntity | lcfirst }}CollectionResponseTransfer
    * @param string[] ${{ domainEntity | lcfirst }}IdsWithErrors
    *
    * @return \Generated\Shared\Transfer\{{ domainEntity }}CollectionTransfer
    */
    protected function filterOutInvalid{{ domainEntity | pluralize }}({{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer, {{ domainEntity }}CollectionResponseTransfer ${{ domainEntity | lcfirst }}CollectionResponseTransfer, array ${{ domainEntity | lcfirst }}IdsWithErrors): {{ domainEntity }}CollectionTransfer
    {
        $valid{{ domainEntity }}CollectionTransfer = new \Generated\Shared\Transfer\{{ domainEntity }}CollectionTransfer();

        foreach (${{ domainEntity | lcfirst }}CollectionRequestTransfer->get{{ domainEntity | pluralize}}() as ${{ domainEntity | lcfirst }}Transfer) {
            // Check each SINGLE item before it is saved for errors, if it has some continue with the next one.
            if (in_array($this->{{ domainEntity | lcfirst }}IdentifierBuilder->buildIdentifier(${{ domainEntity | lcfirst }}Transfer), ${{ domainEntity | lcfirst }}IdsWithErrors, true)) {
                ${{ domainEntity | lcfirst }}CollectionResponseTransfer->add{{ domainEntity }}(${{ domainEntity | lcfirst }}Transfer);

                continue;
            }

            $valid{{ domainEntity }}CollectionTransfer->add{{ domainEntity }}(${{ domainEntity | lcfirst }}Transfer);
        }

        return $valid{{ domainEntity }}CollectionTransfer;
    }

   /**
    * @param \ArrayObject|\Generated\Shared\Transfer\{{ domainEntity }}Transfer[] ${{ domainEntity | lcfirst }}Transfers
    * @param \Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer ${{ domainEntity | lcfirst }}CollectionResponseTransfer
    *
    * @return \Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer
    */
    protected function executeUpdate{{ domainEntity | pluralize }}CollectionResponseTransaction(\ArrayObject ${{ domainEntity | lcfirst }}Transfers, {{ domainEntity }}CollectionResponseTransfer ${{ domainEntity | lcfirst }}CollectionResponseTransfer): {{ domainEntity }}CollectionResponseTransfer
    {
        // Run pre-save plugins
        ${{ domainEntity | lcfirst }}Transfers = $this->execute{{ domainEntity }}PreUpdatePlugins(${{ domainEntity | lcfirst }}Transfers);

        $persisted{{ domainEntity }}Transfers = new \ArrayObject();

        foreach (${{ domainEntity | lcfirst }}Transfers as ${{ domainEntity | lcfirst }}Transfer) {
            $persisted{{ domainEntity }}Transfers->append($this->{{ module | lcfirst }}EntityManager->update{{ domainEntity }}(${{ domainEntity | lcfirst }}Transfer));
        }

        // Run post-save plugins
        $persisted{{ domainEntity }}Transfers = $this->execute{{ domainEntity }}PostUpdatePlugins($persisted{{ domainEntity }}Transfers);

        foreach ($persisted{{ domainEntity }}Transfers as $persisted{{ domainEntity }}Transfer) {
            ${{ domainEntity | lcfirst }}CollectionResponseTransfer->add{{ domainEntity }}($persisted{{ domainEntity }}Transfer);
        }

        return ${{ domainEntity | lcfirst }}CollectionResponseTransfer;
    }

    /**
     * @param \ArrayObject|\Generated\Shared\Transfer\{{ domainEntity }}Transfer[] ${{ domainEntity | lcfirst }}Transfers
     *
     * @return \ArrayObject|\Generated\Shared\Transfer\{{ domainEntity }}Transfer[]
     */
    protected function execute{{ domainEntity }}PreUpdatePlugins(
        \ArrayObject ${{ domainEntity | lcfirst }}Transfers
    ): \ArrayObject {
        foreach ($this->{{ domainEntity | lcfirst }}PreUpdatePlugins as ${{ domainEntity | lcfirst }}PreUpdatePlugin) {
            ${{ domainEntity | lcfirst }}Transfers = ${{ domainEntity | lcfirst }}PreUpdatePlugin->save(${{ domainEntity | lcfirst }}Transfers);
        }

        return ${{ domainEntity | lcfirst }}Transfers;
    }

    /**
     * @param \ArrayObject|\Generated\Shared\Transfer\{{ domainEntity }}Transfer[] ${{ domainEntity | lcfirst }}Transfers
     *
     * @return \ArrayObject|\Generated\Shared\Transfer\{{ domainEntity }}Transfer[]
     */
    protected function execute{{ domainEntity }}PostUpdatePlugins(
        \ArrayObject ${{ domainEntity | lcfirst }}Transfers
    ): \ArrayObject {
        foreach ($this->{{ domainEntity | lcfirst }}PostUpdatePlugins as ${{ domainEntity | lcfirst }}PostUpdatePlugin) {
            ${{ domainEntity | lcfirst }}Transfers = ${{ domainEntity | lcfirst }}PostUpdatePlugin->save(${{ domainEntity | lcfirst }}Transfers);
        }

        return ${{ domainEntity | lcfirst }}Transfers;
    }

    /**
    * @param \Generated\Shared\Transfer\ErrorTransfer[] $errorTransfers
    * @return string[]
    */
    protected function get{{ domainEntity }}IdsWithErrors(array $errorTransfers): array
    {
        return array_unique(array_map(static function (ErrorTransfer $errorTransfer): ?string {
            return $errorTransfer->getEntityIdentifier();
        }, $errorTransfers));
    }
}
