<?php

{{ include('Partials/license.twig') }}

namespace {{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\Writer;

use Generated\Shared\Transfer\{{ domainEntity }}CollectionRequestTransfer;
use Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer;
use Generated\Shared\Transfer\{{ domainEntity }}CollectionTransfer;
use Generated\Shared\Transfer\ErrorTransfer;
use Spryker\Zed\Kernel\Persistence\EntityManager\TransactionTrait;
use {{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\IdentifierBuilder\{{ domainEntity }}IdentifierBuilderInterface;
use {{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\Validator\{{ domainEntity }}ValidatorInterface;
use {{ organization }}\Zed\{{ module }}\Persistence\{{ module }}EntityManagerInterface;

class {{ domainEntity }}{{ className }} implements {{ domainEntity }}{{ className }}Interface
{
    use TransactionTrait;

    /**
     * @var \{{ organization }}\Zed\{{ module }}\Persistence\{{ module }}EntityManagerInterface
     */
    protected {{ module }}EntityManagerInterface ${{ module | lcfirst }}EntityManager;

    /**
     * @var \{{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\Validator\{{ domainEntity }}ValidatorInterface
     */
    protected {{ domainEntity }}ValidatorInterface ${{ domainEntity | lcfirst }}Validator;

    /**
     * @var \{{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\IdentifierBuilder\{{ domainEntity }}IdentifierBuilderInterface
     */
    protected {{ domainEntity }}IdentifierBuilderInterface ${{ domainEntity | lcfirst }}IdentifierBuilder;

    /**
     * @var \{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Writer\{{ domainEntity }}{{ type }}PluginInterface[]
     */
    protected array ${{ domainEntity | lcfirst }}Pre{{ type }}Plugins;

    /**
     * @var \{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Writer\{{ domainEntity }}{{ type }}PluginInterface[]
     */
    protected array ${{ domainEntity | lcfirst }}Post{{ type }}Plugins;

    /**
     * @param \{{ organization }}\Zed\{{ module }}\Persistence\{{ module }}EntityManagerInterface ${{ module | lcfirst }}EntityManager
     * @param \{{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\Validator\{{ domainEntity }}ValidatorInterface ${{ domainEntity | lcfirst }}Validator
     * @param \{{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\IdentifierBuilder\{{ domainEntity }}IdentifierBuilderInterface ${{ domainEntity | lcfirst }}IdentifierBuilder
     * @param \{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Writer\{{ domainEntity }}{{ type }}PluginInterface[] ${{ domainEntity | lcfirst }}Pre{{ type }}Plugins
     * @param \{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Writer\{{ domainEntity }}{{ type }}PluginInterface[] ${{ domainEntity | lcfirst }}Post{{ type }}Plugins
     */
    public function __construct(
        {{ module }}EntityManagerInterface ${{ module | lcfirst }}EntityManager,
        {{ domainEntity }}ValidatorInterface ${{ domainEntity | lcfirst }}Validator,
        {{ domainEntity }}IdentifierBuilderInterface ${{ domainEntity | lcfirst }}IdentifierBuilder,
        array ${{ domainEntity | lcfirst }}Pre{{ type }}Plugins,
        array ${{ domainEntity | lcfirst }}Post{{ type }}Plugins
    ) {
        $this->{{ module | lcfirst }}EntityManager = ${{ module | lcfirst }}EntityManager;
        $this->{{ domainEntity | lcfirst }}Validator = ${{ domainEntity | lcfirst }}Validator;
        $this->{{ domainEntity | lcfirst }}IdentifierBuilder = ${{ domainEntity | lcfirst }}IdentifierBuilder;
        $this->{{ domainEntity | lcfirst }}Pre{{ type }}Plugins = ${{ domainEntity | lcfirst }}Pre{{ type }}Plugins;
        $this->{{ domainEntity | lcfirst }}Post{{ type }}Plugins = ${{ domainEntity | lcfirst }}Post{{ type }}Plugins;
    }

    /**
     * @param \Generated\Shared\Transfer\{{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer
     *
     * @return \Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer
     */
    public function {{ type | lcfirst }}{{ domainEntity }}Collection(
        {{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer
    ): {{ domainEntity }}CollectionResponseTransfer {
        ${{ domainEntity | lcfirst }}CollectionResponseTransfer = new {{ domainEntity }}CollectionResponseTransfer();
        ${{ domainEntity | lcfirst }}CollectionResponseTransfer->set{{ domainEntity | pluralize }}(${{ domainEntity | lcfirst }}CollectionRequestTransfer->get{{ domainEntity | pluralize }}());

        ${{ domainEntity | lcfirst }}CollectionResponseTransfer = $this->{{ domainEntity | lcfirst }}Validator->validateCollection(${{ domainEntity | lcfirst }}CollectionResponseTransfer);

        if (${{ domainEntity | lcfirst }}CollectionRequestTransfer->getIsTransactional() && ${{ domainEntity | lcfirst }}CollectionResponseTransfer->getErrors()->count()) {
            return ${{ domainEntity | lcfirst }}CollectionResponseTransfer;
        }

        ${{ domainEntity | lcfirst }}CollectionResponseTransfer = $this->filterInvalid{{ domainEntity | pluralize }}(${{ domainEntity | lcfirst }}CollectionResponseTransfer);

        // This will save all entities in one transaction. If any of the entities in the collection fails to be persisted
        // it will roll all of them back. And we don't catch exceptions here intentionally!
        return $this->getTransactionHandler()->handleTransaction(function () use (${{ domainEntity | lcfirst }}CollectionResponseTransfer) {
            return $this->execute{{ type }}{{ domainEntity }}CollectionResponseTransaction(${{ domainEntity | lcfirst }}CollectionResponseTransfer);
        });
    }

    /**
     * @param \Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer ${{ domainEntity | lcfirst }}CollectionResponseTransfer
     *
     * @return \Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer
     */
    protected function filterInvalid{{ domainEntity | pluralize }}({{ domainEntity }}CollectionResponseTransfer ${{ domainEntity | lcfirst }}CollectionResponseTransfer): \Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer
    {
        ${{ domainEntity | lcfirst }}IdsWithErrors = $this->get{{ domainEntity }}IdsWithErrors(${{ domainEntity | lcfirst }}CollectionResponseTransfer->getErrors());

        ${{ domainEntity | lcfirst }}Transfers = ${{ domainEntity | lcfirst }}CollectionResponseTransfer->get{{ domainEntity | pluralize}}();
        ${{ domainEntity | lcfirst }}CollectionResponseTransfer->set{{ domainEntity | pluralize}}(new \ArrayObject());

        foreach (${{ domainEntity | lcfirst }}Transfers as ${{ domainEntity | lcfirst }}Transfer) {
            // Check each SINGLE item before it is saved for errors, if it has some continue with the next one.
            if (!in_array($this->{{ domainEntity | lcfirst }}IdentifierBuilder->buildIdentifier(${{ domainEntity | lcfirst }}Transfer), ${{ domainEntity | lcfirst }}IdsWithErrors, true)) {
                ${{ domainEntity | lcfirst }}CollectionResponseTransfer->add{{ domainEntity }}(${{ domainEntity | lcfirst }}Transfer);
            }
        }

        return ${{ domainEntity | lcfirst }}CollectionResponseTransfer;
    }

    /**
     * @param \Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer ${{ domainEntity | lcfirst }}CollectionResponseTransfer
     *
     * @return \Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer
     */
    protected function execute{{ type }}{{ domainEntity }}CollectionResponseTransaction(
        {{ domainEntity }}CollectionResponseTransfer ${{ domainEntity | lcfirst }}CollectionResponseTransfer
    ): {{ domainEntity }}CollectionResponseTransfer {
        // Run pre-save plugins
        ${{ domainEntity | lcfirst }}Transfers = $this->execute{{ domainEntity }}Pre{{ type }}Plugins(${{ domainEntity | lcfirst }}CollectionResponseTransfer->get{{ domainEntity | pluralize }}()->getArrayCopy());

        $persisted{{ domainEntity }}Transfers = [];

        foreach (${{ domainEntity | lcfirst }}Transfers as ${{ domainEntity | lcfirst }}Transfer) {
            $persisted{{ domainEntity }}Transfers[] = $this->ayEntityManager->{{ type | lcfirst }}{{ domainEntity }}(${{ domainEntity | lcfirst }}Transfer);
        }

        // Run post-save plugins
        $persisted{{ domainEntity }}Transfers = $this->execute{{ domainEntity }}Post{{ type }}Plugins($persisted{{ domainEntity }}Transfers);

        ${{ domainEntity | lcfirst }}CollectionResponseTransfer->set{{ domainEntity | pluralize }}(new \ArrayObject($persisted{{ domainEntity }}Transfers));

        return ${{ domainEntity | lcfirst }}CollectionResponseTransfer;
    }

    /**
    * @param \Generated\Shared\Transfer\{{ domainEntity }}Transfer[] ${{ domainEntity | lcfirst }}Transfers
    *
    * @return \Generated\Shared\Transfer\{{ domainEntity }}Transfer[]
    */
    protected function execute{{ domainEntity }}Pre{{ type }}Plugins(
        array ${{ domainEntity | lcfirst }}Transfers
    ): array {
        foreach ($this->{{ domainEntity | lcfirst }}Pre{{ type }}Plugins as ${{ domainEntity | lcfirst }}Pre{{ type }}Plugin) {
            ${{ domainEntity | lcfirst }}Transfers = ${{ domainEntity | lcfirst }}Pre{{ type }}Plugin->execute(${{ domainEntity | lcfirst }}Transfers);
        }

        return ${{ domainEntity | lcfirst }}Transfers;
    }

    /**
    * @param \Generated\Shared\Transfer\{{ domainEntity }}Transfer[] ${{ domainEntity | lcfirst }}Transfers
    *
    * @return \Generated\Shared\Transfer\{{ domainEntity }}Transfer[]
    */
    protected function execute{{ domainEntity }}Post{{ type }}Plugins(
        array ${{ domainEntity | lcfirst }}Transfers
    ): array {
        foreach ($this->{{ domainEntity | lcfirst }}Post{{ type }}Plugins as ${{ domainEntity | lcfirst }}Post{{ type }}Plugin) {
            ${{ domainEntity | lcfirst }}Transfers = ${{ domainEntity | lcfirst }}Post{{ type }}Plugin->execute(${{ domainEntity | lcfirst }}Transfers);
        }

        return ${{ domainEntity | lcfirst }}Transfers;
    }

    /**
    * @param \ArrayObject|\Generated\Shared\Transfer\ErrorTransfer[] $errorTransfers
    *
    * @return string[]
    */
    protected function get{{ domainEntity }}IdsWithErrors(\ArrayObject $errorTransfers): array
    {
        return array_unique(array_map(static function (ErrorTransfer $errorTransfer): ?string {
            return $errorTransfer->getEntityIdentifier();
        }, $errorTransfers->getArrayCopy()));
    }
}
