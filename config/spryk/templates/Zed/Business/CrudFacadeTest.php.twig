<?php

{{ include('Partials/license.twig') }}

namespace {{ organization }}Test\Zed\{{ module }}\Business;

use Codeception\Test\Unit;
use Generated\Shared\Transfer\{{ domainEntity }}CollectionRequestTransfer;

/**
 * Auto-generated group annotations
 *
 * @group {{ organization }}Test
 * @group Zed
 * @group {{ module }}
 * @group Business
 * @group Facade
 * @group {{ domainEntity }}CrudFacadeTest
 * Add your own group annotations below this line
 */
class {{ domainEntity }}CrudFacadeTest extends Unit
{
    /**
     * @var \{{ organization }}Test\Zed\{{ module }}\{{ module }}BusinessTester
     */
    protected $tester;

    /**
     * Test ensures to always get a Collection back even if no entity was found.
     *
     * @return void
     */
    public function testGet{{ domainEntity }}ReturnsEmptyCollectionWhenNoEntityMatchedByCriteria(): void
    {
        // Arrange
        $this->tester->have{{ domainEntity }}TransferWithUuidTwoPersisted();
        ${{ domainEntity | lcfirst }}CriteriaTransfer = $this->tester->have{{ domainEntity }}CriteriaTransferWithUuidOneCriteria();

        // Act
        ${{ domainEntity | lcfirst }}CollectionTransfer = $this->tester->getFacade()->get{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CriteriaTransfer);

        // Assert
        $this->tester->assert{{ domainEntity }}CollectionIsEmpty(${{ domainEntity | lcfirst }}CollectionTransfer);
    }

    /**
     * Test ensures to get a Collection with entities back when criteria was matching.
     *
     * @return void
     */
    public function testGet{{ domainEntity }}ReturnsCollectionWithOne{{ domainEntity }}EntityWhenCriteriaMatched(): void
    {
        // Arrange
        ${{ domainEntity | lcfirst }}Transfer = $this->tester->have{{ domainEntity }}TransferWithUuidOnePersisted();
        ${{ domainEntity | lcfirst }}CriteriaTransfer = $this->tester->have{{ domainEntity }}CriteriaTransferWithUuidOneCriteria();

        // Act
        ${{ domainEntity | lcfirst }}CollectionTransfer = $this->tester->getFacade()->get{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CriteriaTransfer);

        // Assert
        $this->tester->assert{{ domainEntity }}CollectionContainsTransferWithId(${{ domainEntity | lcfirst }}CollectionTransfer, ${{ domainEntity | lcfirst }}Transfer);
    }

    /**
     * Test ensures that expanders are applied to found entities.
     *
     * @return void
     */
    public function testGet{{ domainEntity }}CollectionReturnsCollectionWithOneExpanded{{ domainEntity }}Entity(): void
    {
        // Arrange
        $this->tester->have{{ domainEntity }}ExpanderPluginSetUuidTwoEnabled();
        ${{ domainEntity | lcfirst }}Transfer = $this->tester->have{{ domainEntity }}TransferWithUuidOnePersisted();

        ${{ domainEntity | lcfirst }}CriteriaTransfer = $this->tester->have{{ domainEntity }}CriteriaTransferWithUuidOneCriteria();

        // Act
        ${{ domainEntity | lcfirst }}CollectionTransfer = $this->tester->getFacade()->get{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CriteriaTransfer);

        // Assert
        $this->tester->assert{{ domainEntity }}CollectionContainsTransferWithId(${{ domainEntity | lcfirst }}CollectionTransfer, ${{ domainEntity | lcfirst }}Transfer);
    }

    /**
     * @return void
     */
    public function testCreate{{ domainEntity }}CollectionReturnsCollectionWithOne{{ domainEntity }}EntityWhenEntityWasSaved(): void
    {
        // Arrange
        ${{ domainEntity | lcfirst }}Transfer = $this->tester->have{{ domainEntity }}TransferWithUuidOne();
        ${{ domainEntity | lcfirst }}CollectionRequestTransfer = new {{ domainEntity }}CollectionRequestTransfer();
        ${{ domainEntity | lcfirst }}CollectionRequestTransfer->add{{ domainEntity }}(${{ domainEntity | lcfirst }}Transfer);

        // Act
        ${{ domainEntity | lcfirst }}CollectionResponseTransfer = $this->tester->getFacade()->create{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);

        // Assert
        $this->tester->assert{{ domainEntity | lcfirst }}CollectionResponseContainsOneWithUuidOneTransfer(${{ domainEntity | lcfirst }}CollectionResponseTransfer);
    }

    /**
     * Tests that pre-create plugins are applied to entities.
     *
     * @return void
     */
    public function testCreate{{ domainEntity }}CollectionAppliesPreCreatePlugins(): void
    {
        // Arrange
        $this->tester->have{{ domainEntity }}PreCreatePluginSetUuidTwoEnabled();
        ${{ domainEntity | lcfirst }}Transfer = $this->tester->have{{ domainEntity }}TransferWithUuidOne();
        ${{ domainEntity | lcfirst }}CollectionRequestTransfer = new {{ domainEntity }}CollectionRequestTransfer();
        ${{ domainEntity | lcfirst }}CollectionRequestTransfer->add{{ domainEntity }}(${{ domainEntity | lcfirst }}Transfer);

        // Act
        ${{ domainEntity | lcfirst }}CollectionResponseTransfer = $this->tester->getFacade()->create{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);

        // Assert
        $this->tester->assert{{ domainEntity | lcfirst }}CollectionResponseContainsOneWithUuidTwoTransfer(${{ domainEntity | lcfirst }}CollectionResponseTransfer, ${{ domainEntity | lcfirst }}Transfer);
    }

    /**
     * Tests that post-create plugins are applied to entities.
     *
     * @return void
     */
    public function testCreate{{ domainEntity }}CollectionAppliesPostCreatePlugins(): void
    {
        // Arrange
        $this->tester->have{{ domainEntity }}PostCreatePluginSetUuidTwoEnabled();
        ${{ domainEntity | lcfirst }}Transfer = $this->tester->have{{ domainEntity }}TransferWithUuidOne();
        ${{ domainEntity | lcfirst }}CollectionRequestTransfer = new {{ domainEntity }}CollectionRequestTransfer();
        ${{ domainEntity | lcfirst }}CollectionRequestTransfer->add{{ domainEntity }}(${{ domainEntity | lcfirst }}Transfer);

        // Act
        ${{ domainEntity | lcfirst }}CollectionResponseTransfer = $this->tester->getFacade()->create{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);

        // Assert
        $this->tester->assert{{ domainEntity | lcfirst }}CollectionResponseContainsOneWithUuidTwoTransfer(${{ domainEntity | lcfirst }}CollectionResponseTransfer, ${{ domainEntity | lcfirst }}Transfer);
    }

    /**
     * Tests that entities are validated with internal ValidatorRuleInterface.
     *
     * @return void
     */
    public function testCreate{{ domainEntity }}CollectionReturnsErroredCollectionResponseWhenValidationRuleFailed(): void
    {
        // Arrange
        ${{ domainEntity | lcfirst }}Transfer = $this->tester->have{{ domainEntity }}TransferWithUuidOnePersisted();

        $this->tester->have{{ domainEntity }}AlwaysFailingCreateValidatorRuleEnabled(); // This will always return a validation error
        ${{ domainEntity | lcfirst }}CollectionRequestTransfer = new {{ domainEntity }}CollectionRequestTransfer();
        ${{ domainEntity | lcfirst }}CollectionRequestTransfer->add{{ domainEntity }}(${{ domainEntity | lcfirst }}Transfer);

        // Act
        ${{ domainEntity | lcfirst }}CollectionResponseTransfer = $this->tester->getFacade()->create{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);

        // Assert
        $this->tester->assert{{ domainEntity }}CollectionResponseContainsFailedValidationRuleError(${{ domainEntity | lcfirst }}CollectionResponseTransfer);
    }

    /**
     * Tests that entities are validated with external ValidatorRulePluginInterface.
     *
     * @return void
     */
    public function testCreate{{ domainEntity }}CollectionReturnsErroredCollectionResponseWhenValidationRulePluginFailed(): void
    {
        // Arrange
        $this->tester->have{{ domainEntity }}AlwaysFailingCreateValidatorRulePluginEnabled(); // This will always return a validation error
        ${{ domainEntity | lcfirst }}Transfer = $this->tester->have{{ domainEntity }}TransferWithUuidOne();
        ${{ domainEntity | lcfirst }}CollectionRequestTransfer = new {{ domainEntity }}CollectionRequestTransfer();
        ${{ domainEntity | lcfirst }}CollectionRequestTransfer->add{{ domainEntity }}(${{ domainEntity | lcfirst }}Transfer);

        // Act
        ${{ domainEntity | lcfirst }}CollectionResponseTransfer = $this->tester->getFacade()->create{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);

        // Assert
        $this->tester->assert{{ domainEntity }}CollectionResponseContainsFailedValidationRuleError(${{ domainEntity | lcfirst }}CollectionResponseTransfer);
    }

    /**
     * @return void
     */
    public function testUpdate{{ domainEntity }}CollectionReturnsCollectionWithOne{{ domainEntity }}EntityWhenEntityWasSaved(): void
    {
        // Arrange
        ${{ domainEntity | lcfirst }}Transfer = $this->tester->have{{ domainEntity }}TransferWithUuidOnePersisted();
        ${{ domainEntity | lcfirst }}CollectionRequestTransfer = new {{ domainEntity }}CollectionRequestTransfer();
        ${{ domainEntity | lcfirst }}CollectionRequestTransfer->add{{ domainEntity }}(${{ domainEntity | lcfirst }}Transfer);

        // Act
        ${{ domainEntity | lcfirst }}CollectionResponseTransfer = $this->tester->getFacade()->update{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);

        // Assert
        $this->tester->assert{{ domainEntity }}CollectionResponseContainsOneWithUuidOneTransferWithId(${{ domainEntity | lcfirst }}CollectionResponseTransfer, ${{ domainEntity | lcfirst }}Transfer);
    }

    /**
     * Tests that pre-update plugins are applied to entities.
     *
     * @return void
     */
    public function testUpdate{{ domainEntity }}CollectionAppliesPreUpdatePlugins(): void
    {
        // Arrange
        $this->tester->have{{ domainEntity }}PreUpdatePluginSetUuidTwoEnabled();
        ${{ domainEntity | lcfirst }}Transfer = $this->tester->have{{ domainEntity }}TransferWithUuidOnePersisted();
        ${{ domainEntity | lcfirst }}CollectionRequestTransfer = new {{ domainEntity }}CollectionRequestTransfer();
        ${{ domainEntity | lcfirst }}CollectionRequestTransfer->add{{ domainEntity }}(${{ domainEntity | lcfirst }}Transfer);

        // Act
        ${{ domainEntity | lcfirst }}CollectionResponseTransfer = $this->tester->getFacade()->update{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);

        // Assert
        $this->tester->assert{{ domainEntity }}CollectionResponseContainsOneWithUuidTwoTransferWithId(${{ domainEntity | lcfirst }}CollectionResponseTransfer, ${{ domainEntity | lcfirst }}Transfer);
    }

    /**
     * Tests that post-update plugins are applied to entities.
     *
     * @return void
     */
    public function testUpdate{{ domainEntity }}CollectionAppliesPostUpdatePlugins(): void
    {
        // Arrange
        $this->tester->have{{ domainEntity }}PostUpdatePluginSetUuidTwoEnabled();
        ${{ domainEntity | lcfirst }}Transfer = $this->tester->have{{ domainEntity }}TransferWithUuidOnePersisted();
        ${{ domainEntity | lcfirst }}CollectionRequestTransfer = new {{ domainEntity }}CollectionRequestTransfer();
        ${{ domainEntity | lcfirst }}CollectionRequestTransfer->add{{ domainEntity }}(${{ domainEntity | lcfirst }}Transfer);

        // Act
        ${{ domainEntity | lcfirst }}CollectionResponseTransfer = $this->tester->getFacade()->update{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);

        // Assert
        $this->tester->assert{{ domainEntity }}CollectionResponseContainsOneWithUuidTwoTransferWithId(${{ domainEntity | lcfirst }}CollectionResponseTransfer, ${{ domainEntity | lcfirst }}Transfer);
    }

    /**
     * Tests that entities are validated with internal ValidatorRuleInterface.
     *
     * @return void
     */
    public function testUpdate{{ domainEntity }}CollectionReturnsErroredCollectionResponseWhenValidationRuleFailed(): void
    {
        // Arrange
        $this->tester->have{{ domainEntity }}AlwaysFailingUpdateValidatorRuleEnabled(); // This will always return a validation error
        ${{ domainEntity | lcfirst }}Transfer = $this->tester->have{{ domainEntity }}TransferWithUuidOnePersisted();
        ${{ domainEntity | lcfirst }}CollectionRequestTransfer = new {{ domainEntity }}CollectionRequestTransfer();
        ${{ domainEntity | lcfirst }}CollectionRequestTransfer->add{{ domainEntity }}(${{ domainEntity | lcfirst }}Transfer);

        // Act
        ${{ domainEntity | lcfirst }}CollectionResponseTransfer = $this->tester->getFacade()->update{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);

        // Assert
        $this->tester->assert{{ domainEntity }}CollectionResponseContainsFailedValidationRuleError(${{ domainEntity | lcfirst }}CollectionResponseTransfer);
    }

    /**
     * Tests that entities are validated with external ValidatorRulePluginInterface.
     *
     * @return void
     */
    public function testUpdate{{ domainEntity }}CollectionReturnsErroredCollectionResponseWhenValidationRulePluginFailed(): void
    {
        // Arrange
        $this->tester->have{{ domainEntity }}AlwaysFailingUpdateValidatorRulePluginEnabled(); // This will always return a validation error
        ${{ domainEntity | lcfirst }}Transfer = $this->tester->have{{ domainEntity }}TransferWithUuidOnePersisted();
        ${{ domainEntity | lcfirst }}CollectionRequestTransfer = new {{ domainEntity }}CollectionRequestTransfer();
        ${{ domainEntity | lcfirst }}CollectionRequestTransfer->add{{ domainEntity }}(${{ domainEntity | lcfirst }}Transfer);

        // Act
        ${{ domainEntity | lcfirst }}CollectionResponseTransfer = $this->tester->getFacade()->update{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);

        // Assert
        $this->tester->assert{{ domainEntity }}CollectionResponseContainsFailedValidationRuleError(${{ domainEntity | lcfirst }}CollectionResponseTransfer);
    }

    /**
     * Test ensures to always get a Collection back even if no entity was deleted.
     *
     * @return void
     */
    public function testDelete{{ domainEntity }}ReturnsEmptyCollectionWhenNoEntityMatchedByCriteria(): void
    {
        // Arrange
        $this->tester->have{{ domainEntity }}TransferWithUuidTwoPersisted();
        ${{ domainEntity | lcfirst }}DeleteCriteriaTransfer = $this->tester->have{{ domainEntity }}DeleteCriteriaTransferWithUuidOneCriteria();

        // Act
        ${{ domainEntity | lcfirst }}CollectionResponseTransfer = $this->tester->getFacade()->delete{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}DeleteCriteriaTransfer);

        // Assert
        $this->tester->assert{{ domainEntity }}CollectionResponseIsEmpty(${{ domainEntity | lcfirst }}CollectionResponseTransfer);
    }

    /**
     * Test ensures to get a Collection with deleted entities back when criteria was matching.
     *
     * @return void
     */
    public function testDelete{{ domainEntity }}ReturnsCollectionWithOne{{ domainEntity }}EntityWhenCriteriaMatched(): void
    {
        // Arrange
        ${{ domainEntity | lcfirst }}Transfer = $this->tester->have{{ domainEntity }}TransferWithUuidOnePersisted();
        ${{ domainEntity | lcfirst }}DeleteCriteriaTransfer = $this->tester->have{{ domainEntity }}DeleteCriteriaTransferWithUuidOneCriteria();

        // Act
        ${{ domainEntity | lcfirst }}CollectionResponseTransfer = $this->tester->getFacade()->delete{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}DeleteCriteriaTransfer);

        // Assert
        $this->tester->assert{{ domainEntity }}CollectionResponseContainsOneWithUuidOneTransferWithId(${{ domainEntity | lcfirst }}CollectionResponseTransfer, ${{ domainEntity | lcfirst }}Transfer);
    }
}
