spryk: wrapper
description: "Adds a Registry code for Apps. It builds connect and disconnect logic."
priority: 1
mode: both
level: 1

arguments:
    organization:
        inherit: true
        default: Spryker

    application:
        inherit: true
        default: Zed

    module:
        inherit: true

excludedSpryks:
    - AddZedPresentationTwig
    - AddZedNavigationNode

preSpryks:
    - AddModule

postSpryks:
    - AddZedBusinessModelMethod:
          arguments:
              allowOverride:
                  value: true
              className:
                  value: "{{ module }}Registry"
              subDirectory:
                  value: Registry
              modelMethod:
                  value: disconnect
              input:
                  value: "\\Generated\\Shared\\Transfer\\AppRegistryRequestTransfer $appRegistryRequestTransfer"
              output:
                  value: "\\Generated\\Shared\\Transfer\\AppRegistryResponseTransfer"
              body:
                  value:
                      - "$appRegistryRequestTransfer->requireTenantIdentifier();"
                      - ""
                      - "return (new AppRegistryResponseTransfer())->setIsSuccessful(true);"

    - AddConstant:
          arguments:
              name:
                  value: "HEADER_TENANT_ID"
              value:
                  value: "X-Tenant-Id"
              visibility:
                  value: "public"
              target:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\{{ module }}Config"

    - AddConstant:
          arguments:
              name:
                  value: "RESPONSE_CODE_INVALID_HTTP_METHOD"
              value:
                  value: "800"
              visibility:
                  value: "public"
              target:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\{{ module }}Config"

    - AddConstant:
          arguments:
              name:
                  value: "RESPONSE_MESSAGE_INVALID_HTTP_METHOD"
              value:
                  value: "Incorrect HTTP method."
              visibility:
                  value: "public"
              target:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\{{ module }}Config"

    - AddConstant:
          arguments:
              name:
                  value: "RESPONSE_CODE_MISSING_TENANT_IDENTIFIER"
              value:
                  value: "801"
              visibility:
                  value: "public"
              target:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\{{ module }}Config"

    - AddConstant:
          arguments:
              name:
                  value: "RESPONSE_MESSAGE_MISSING_TENANT_IDENTIFIER"
              value:
                  value: "X-Tenant-Id in header is required."
              visibility:
                  value: "public"
              target:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\{{ module }}Config"

    - AddZedCommunicationControllerAction:
          excludedSpryks:
              - AddZedPresentationTwig
              - AddZedNavigationNode
          arguments:
              allowOverride:
                  value: true
              input:
                  value: "\\Symfony\\Component\\HttpFoundation\\Request $request"
              output:
                  value: "\\Symfony\\Component\\HttpFoundation\\JsonResponse"
              controller:
                  value: RegistryController
              controllerMethod:
                  value: disconnect
              body:
                  allowOverride: true
                  value: "App/Registry/ZedControllerDisconnectMethod.php.twig"

    - AddMethod:
          arguments:
              allowOverride:
                  value: true
              input:
                  value: "\\Generated\\Shared\\Transfer\\AppRegistryResponseTransfer $appRegistryResponseTransfer"
              output:
                  value: "\\Symfony\\Component\\HttpFoundation\\JsonResponse"
              target:
                  value: "{{ organization }}\\Zed\\{{ module }}\\Communication\\Controller\\RegistryController"
              method:
                  value: buildResponse
              visibility:
                  value: protected
              body:
                  allowOverride: true
                  value:
                      - "if (!$appRegistryResponseTransfer->getIsSuccessful()) {"
                      - "    return $this->buildErrorResponse($appRegistryResponseTransfer);"
                      - "}"
                      - ""
                      - "return $this->jsonResponse([]);"
              withInterface:
                  value: false

    - AddZedCommunicationTest:
          arguments:
              className:
                  value: RegistryController

    - AddConstant:
          arguments:
              name:
                  value: "PATH_REGISTRY_DISCONNECT"
              value:
                  value: "{{ module | dasherize }}/registry/disconnect"
              visibility:
                  value: "protected"
              target:
                  value: "\\{{ organization }}Test\\Zed\\{{ module }}\\Communication\\RegistryControllerTest"

    - AddMethod:
          arguments:
              method:
                  value: "testDisconnectActionDisconnectsSuccessfullyWithValidRequestData"
              target:
                  value: "\\{{ organization }}Test\\Zed\\{{ module }}\\Communication\\RegistryControllerTest"
              body:
                  value:
                      - "// Arrange"
                      - "$request = \\Symfony\\Component\\HttpFoundation\\Request::create(static::PATH_REGISTRY_DISCONNECT, Request::METHOD_POST);"
                      - "$request->headers->set(\\{{ organization }}\\Zed\\{{ module }}\\{{ module }}Config::HEADER_TENANT_ID, \\Ramsey\\Uuid\\Uuid::uuid4()->toString());"
                      - ""
                      - "// Act"
                      - "$response = (new \\{{ organization }}\\Zed\\{{ module }}\\Communication\\Controller\\RegistryController())->disconnectAction($request);"
                      - ""
                      - "// Assert"
                      - "$this->assertInstanceOf(\\Symfony\\Component\\HttpFoundation\\JsonResponse::class, $response);"
                      - "$this->assertTrue($response->isSuccessful());"
                      - "$this->assertSame($response->getContent(), json_encode([]));"
              withInterface:
                  value: false

    - AddMethod:
          arguments:
              method:
                  value: "testDisconnectActionReturnsValidationErrorWithIncorrectMethod"
              target:
                  value: "\\{{ organization }}Test\\Zed\\{{ module }}\\Communication\\RegistryControllerTest"
              body:
                  value:
                      - "// Arrange"
                      - "$request = \\Symfony\\Component\\HttpFoundation\\Request::create(static::PATH_REGISTRY_DISCONNECT, Request::METHOD_GET);"
                      - "$request->headers->set(\\{{ organization }}\\Zed\\{{ module }}\\{{ module }}Config::HEADER_TENANT_ID, \\Ramsey\\Uuid\\Uuid::uuid4()->toString());"
                      - ""
                      - "// Act"
                      - "$response = (new \\{{ organization }}\\Zed\\{{ module }}\\Communication\\Controller\\RegistryController())->disconnectAction($request);"
                      - ""
                      - "// Assert"
                      - "$this->assertInstanceOf(\\Symfony\\Component\\HttpFoundation\\JsonResponse::class, $response);"
                      - "$this->assertFalse($response->isSuccessful());"
                      - "$this->assertThat($response->getContent(), new \\Codeception\\PHPUnit\\Constraint\\JsonContains(["
                      - "    'errors' => [['code' => {{ module }}Config::RESPONSE_CODE_INVALID_HTTP_METHOD]],"
                      - "]));"
              withInterface:
                  value: false

    - AddMethod:
          arguments:
              method:
                  value: "testDisconnectActionReturnsValidationErrorWithMissingTenantId"
              target:
                  value: "\\{{ organization }}Test\\Zed\\{{ module }}\\Communication\\RegistryControllerTest"
              body:
                  value:
                      - "// Arrange"
                      - "$request = \\Symfony\\Component\\HttpFoundation\\Request::create(static::PATH_REGISTRY_DISCONNECT, Request::METHOD_POST);"
                      - ""
                      - "// Act"
                      - "$response = (new \\{{ organization }}\\Zed\\{{ module }}\\Communication\\Controller\\RegistryController())->disconnectAction($request);"
                      - ""
                      - "// Assert"
                      - "$this->assertInstanceOf(\\Symfony\\Component\\HttpFoundation\\JsonResponse::class, $response);"
                      - "$this->assertFalse($response->isSuccessful());"
                      - "$this->assertThat($response->getContent(), new \\Codeception\\PHPUnit\\Constraint\\JsonContains(["
                      - "    'errors' => [['code' => {{ module }}Config::RESPONSE_CODE_MISSING_TENANT_IDENTIFIER]],"
                      - "]));"
              withInterface:
                  value: false

    - AddMethod:
          arguments:
              allowOverride:
                  value: true
              input:
                  value: "\\Generated\\Shared\\Transfer\\AppRegistryResponseTransfer $appRegistryResponseTransfer"
              output:
                  value: "\\Symfony\\Component\\HttpFoundation\\JsonResponse"
              target:
                  value: "{{ organization }}\\Zed\\{{ module }}\\Communication\\Controller\\RegistryController"
              method:
                  value: buildErrorResponse
              visibility:
                  value: protected
              body:
                  allowOverride: true
                  value:
                      - "$responseData = [];"
                      - ""
                      - "foreach ($appRegistryResponseTransfer->getErrorMessages() as $errorMessageTransfer) {"
                      - "    $responseData['errors'][] = ["
                      - "        'code' => $errorMessageTransfer->getCode(),"
                      - "        'detail' => $errorMessageTransfer->getDetail(),"
                      - "    ];"
                      - "}"
                      - ""
                      - "return $this->jsonResponse($responseData, \\Symfony\\Component\\HttpFoundation\\Response::HTTP_BAD_REQUEST);"
              withInterface:
                  value: false

    - AddZedBusinessFacadeMethod:
          arguments:
              allowOverride:
                  value: true
              facadeMethod:
                  value: disconnect
              input:
                  value: "\\Generated\\Shared\\Transfer\\AppRegistryRequestTransfer $appRegistryRequestTransfer"
              output:
                  value: "\\Generated\\Shared\\Transfer\\AppRegistryResponseTransfer"
              body:
                  allowOverride: true
                  value:
                      - "return $this->getFactory()->create{{ module }}Registry()"
                      - "    ->disconnect($appRegistryRequestTransfer);"

    - AddZedBusinessFacadeMethodTest:
          arguments:
              allowOverride:
                  value: true
              facadeMethod:
                  value: disconnect
              output:
                  value: "void"
              body:
                  allowOverride: true
                  value:
                      - "$appRegistryRequestTransfer = (new \\Generated\\Shared\\Transfer\\AppRegistryRequestTransfer())"
                      - "     ->setTenantIdentifier(\\Ramsey\\Uuid\\Uuid::uuid4()->toString());"
                      - ""
                      - "$appRegistryResponseTransfer = $this->tester->getFacade()->disconnect($appRegistryRequestTransfer);"
                      - ""
                      - "$this->assertInstanceOf(\\Generated\\Shared\\Transfer\\AppRegistryResponseTransfer::class, $appRegistryResponseTransfer);"
                      - "$this->assertTrue($appRegistryResponseTransfer->getIsSuccessful());"
                      - "$this->assertCount(0, $appRegistryResponseTransfer->getErrorMessages());"

    - AddZedBusinessFacadeMethodTest:
          arguments:
              facadeMethod:
                  value: disconnectThrowsExceptionWithWithInvalidData
              output:
                  value: "void"
              body:
                  allowOverride: true
                  value:
                      - "$appRegistryRequestTransfer = new \\Generated\\Shared\\Transfer\\AppRegistryRequestTransfer();"
                      - ""
                      - "$this->expectException(\\Spryker\\Shared\\Kernel\\Transfer\\Exception\\RequiredTransferPropertyException::class);"
                      - ""
                      - "$this->tester->getFacade()->disconnect($appRegistryRequestTransfer);"

    - AddZedCommunicationModelMethod:
          arguments:
              className:
                  value: RequestValidator
              subDirectory:
                  value: RequestValidator
              modelMethod:
                  value: validateAppRegistryRequest
              input:
                  value: "\\Symfony\\Component\\HttpFoundation\\Request $request"
              output:
                  value: "?\\Generated\\Shared\\Transfer\\ErrorMessageTransfer"
              body:
                  value:
                      - "if ($request->getMethod() !== Request::METHOD_POST) {"
                      - "    return (new \\Generated\\Shared\\Transfer\\ErrorMessageTransfer())->setCode(\\{{ organization }}\\Zed\\{{ module }}\\{{ module }}Config::RESPONSE_CODE_INVALID_HTTP_METHOD)"
                      - "        ->setDetail({{ module }}Config::RESPONSE_MESSAGE_INVALID_HTTP_METHOD);"
                      - "}"
                      - ""
                      - "if (!$request->headers->get({{ module }}Config::HEADER_TENANT_ID)) {"
                      - "    return (new \\Generated\\Shared\\Transfer\\ErrorMessageTransfer())->setCode({{ module }}Config::RESPONSE_CODE_MISSING_TENANT_IDENTIFIER)"
                      - "        ->setDetail({{ module }}Config::RESPONSE_MESSAGE_MISSING_TENANT_IDENTIFIER);"
                      - "}"
                      - ""
                      - "return null;"

    - AddZedCommunicationModelMethod:
          arguments:
              allowOverride:
                  value: true
              className:
                  value: RequestMapper
              subDirectory:
                  value: RequestMapper
              modelMethod:
                  value: mapAppRegistryRequestToTransfer
              input:
                  value: "\\Symfony\\Component\\HttpFoundation\\Request $request, \\Generated\\Shared\\Transfer\\AppRegistryRequestTransfer $appRegistryRequestTransfer"
              output:
                  value: "\\Generated\\Shared\\Transfer\\AppRegistryRequestTransfer"
              body:
                  value:
                      - "return $appRegistryRequestTransfer->setTenantIdentifier("
                      - "    $request->headers->get(\\{{ organization }}\\Zed\\{{ module }}\\{{ module }}Config::HEADER_TENANT_ID)"
                      - ");"

    - AddSharedTransferDefinition:
          arguments:
              name:
                  value: "AppRegistryRequest"

    - AddSharedTransferProperty:
          arguments:
              name:
                  value: "AppRegistryRequest"
              propertyName:
                  value: "tenantIdentifier"
              propertyType:
                  value: "string"

    - AddSharedTransferProperty:
          arguments:
              name:
                  value: "AppRegistryResponse"
              propertyName:
                  value: "isSuccessful"
              propertyType:
                  value: "bool"

    - AddSharedTransferProperty:
          arguments:
              name:
                  value: "AppRegistryResponse"
              propertyName:
                  value: "errorMessages"
              propertyType:
                  value: "ErrorMessage[]"
              singular:
                  value: "errorMessage"

    - AddSharedTransferProperty:
          arguments:
              name:
                  value: "ErrorMessage"
              propertyName:
                  value: "code"
              propertyType:
                  value: "string"

    - AddSharedTransferProperty:
          arguments:
              name:
                  value: "ErrorMessage"
              propertyName:
                  value: "detail"
              propertyType:
                  value: "string"
