name: AddGlueResourceMethodResponse
spryk: wrapper
description: "Adds code to be able to receive a Glue request for a resource with a given HTTP method and to return a defined response."
mode: both
level: 2
application: Glue

priority: 1

arguments:
    module:
        description: "Based on the applicationType the module name will be suffixed with BackendApi or StorefrontApi by the ResourceModuleName callback."
        inherit: true
        default: "{{ resource | resourceNameToModuleName }}"
        callback: GlueResourceModuleName

    dataModule: # dataModule
        inherit: true
        description: "The module name for the Zed Application. It's the same name as for the Glue Module but without the Api suffix."
        value: "{{ module | removeApiSuffix | singularize }}"

    organization:
        inherit: true
        default: Spryker

    application:
        inherit: true
        default: Glue

    apiType:
        inherit: true
        description: "Can be JSON only as for now."
        default: "JSON"

    applicationType:
        inherit: true
        description: "Can be one of: Backend or Storefront"
        default: "Backend"

    suite:
        value: "{{ applicationType }}Api"

    isBulk:
        description: "Defines if this resource should work with Collections. When set to true the method will use collections when possible."
        value: false

    resource:
        inherit: true
        description: "Defines the resource name this resource plugin will work with."

    httpMethod:
        description: "The HTTP method e.g. POST"
        callback: StringToLower

    httpResponseCode:
        description: "The HTTP response code e.g. 200 (OK)"

    controller:
        default: "{{ resource | resourceNameToControllerName }}ResourceController"

    zedDomainEntity:
        description: "Defines the domainEntity used on Zed side for the CRUD Facade. It will be used to create all needed Transfer Objects."
        default: "{{ resource | resourceNameToModelName | singularize }}"

    resourceDataObject:
        description: "Defines the Transfer that will be used in the Methods. Do not use Transfer as suffix, it will be added automatically. Example: Customer (ok) CustomerTransfer (wrong)"
        default: "{{ resource | resourceNameToModelName | singularize }}"

postSpryks:
    - AddGlueApiApplicationRequestMapper
    - AddGlueApiApplicationResponseMapper
    - AddGlueApiApplicationResourcePlugin
    # Add CrudFacade code
    - AddCrudFacade:
          arguments:
              module:
                  value: "{{ dataModule }}"
              domainEntity:
                  value: "{{ zedDomainEntity | ucfirst }}"
    # Add the dependency provider for the Facade
    - AddDependencyTypeToDependencyProvider:
          arguments:
              dependentModule:
                  value: "{{ dataModule }}"
              dependencyType:
                  value: "Facade"

    # Add bridge method to get an entity collection for the used facade
    - AddDependencyBridgeMethod:
          condition: "httpMethod === 'get'"
          arguments:
              dependentModule:
                  value: "{{ dataModule }}"
              dependencyType:
                  value: "Facade"
              methods:
                  value:
                      - "get{{ zedDomainEntity }}Collection"

    # Add bridge method to get an entity collection for the used facade
    - AddDependencyBridgeMethod:
          condition: "httpMethod === 'post'"
          arguments:
              dependentModule:
                  value: "{{ dataModule }}"
              dependencyType:
                  value: "Facade"
              methods:
                  value:
                      - "create{{ zedDomainEntity }}Collection"

    # Add bridge method to get an entity collection for the used facade
    - AddDependencyBridgeMethod:
          condition: "httpMethod === 'patch'"
          arguments:
              dependentModule:
                  value: "{{ dataModule }}"
              dependencyType:
                  value: "Facade"
              methods:
                  value:
                      - "update{{ zedDomainEntity }}Collection"

    # Add bridge method to get an entity collection for the used facade
    - AddDependencyBridgeMethod:
          condition: "httpMethod === 'delete'"
          arguments:
              dependentModule:
                  value: "{{ dataModule }}"
              dependencyType:
                  value: "Facade"
              methods:
                  value:
                      - "delete{{ zedDomainEntity }}Collection"

    - AddDependencyTypeToDependencyProvider:
          condition: "applicationType === 'Storefront'"
          arguments:
              dependentModule:
                  value: "{{ dataModule }}"
              dependencyType:
                  value: "Client"

    # What are the client methods we would need to bridge??

    # Add the controller method to handle the request
    - AddGlueApiApplicationControllerMethodGet:
          condition: "httpMethod === 'get' && isBulk === false"
    - AddGlueApiApplicationControllerMethodGetCollection:
          condition: "httpMethod === 'get' && isBulk === true"
    - AddGlueApiApplicationControllerMethodPost:
          condition: "httpMethod === 'post'"
    - AddGlueApiApplicationControllerMethodPatch:
          condition: "httpMethod === 'patch'"
    - AddGlueApiApplicationControllerMethodDelete:
          condition: "httpMethod === 'delete' && isBulk === false"
    - AddGlueApiApplicationControllerMethodDeleteCollection:
          condition: "httpMethod === 'delete' && isBulk === true"

    # Test
    - AddGlueTestCodeceptionConfiguration
    - AddGlueTestHelper
