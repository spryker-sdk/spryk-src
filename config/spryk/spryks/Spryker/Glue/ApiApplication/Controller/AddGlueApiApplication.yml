name: AddGlueApiApplication
spryk: wrapper
description: "Adds a new Glue API Application."
mode: both

arguments:
    module:
        inherit: true

    organization:
        inherit: true
        default: Spryker

    application:
        inherit: true
        default: Glue

    apiType:
        default: JSON

    applicationType:
        inherit: true
        description: "Can be one of: Backend or Storefront"
        default: Backend

preSpryks:
    - AddComposerJson
    - UpdateJson:
          arguments:
              target:
                  value: "require"
              key:
                  value: "spryker/glue-backend-api-application"
              value:
                  value: "^1.0.0"
              targetFilename:
                  value: composer.json
    - UpdateJson:
          arguments:
              target:
                  value: "require"
              key:
                  value: "spryker/glue-storefront-api-application"
              value:
                  value: "^1.0.0"
              targetFilename:
                  value: composer.json
    - UpdateJson:
          arguments:
              target:
                  value: "require"
              key:
                  value: "spryker/glue-application"
              value:
                  value: "^1.47.0"
              targetFilename:
                  value: composer.json
    - UpdateJson:
          condition: "apiType === 'JSON'"
          arguments:
              target:
                  value: "require"
              key:
                  value: "spryker/glue-json-api-convention"
              value:
                  value: "^1.0.0"
              targetFilename:
                  value: composer.json
    # Add index.php
    - AddFileFromTemplate:
          condition: "applicationType === 'Backend' && organization !== 'Spryker'"
          arguments:
              targetFilename:
                  value: index.php

              targetPath:
                  value: "public/GlueBackend/"

              template:
                  value: "Spryker/Glue/BackendApi/index.php.twig"
    - AddFileFromTemplate:
          condition: "applicationType === 'Storefront' && organization !== 'Spryker'"
          arguments:
              targetFilename:
                  value: index.php

              targetPath:
                  value: "public/GlueStorefront/"

              template:
                  value: "Spryker/Glue/StorefrontApi/index.php.twig"

    # Add AddGlueApiApplicationBootstrap
    - AddFileFromTemplate:
          condition: "applicationType === 'Backend'"
          arguments:
              targetFilename:
                  value: "Glue{{ applicationType }}ApiBootstrap.php"

              targetPath:
                  value: "src/{{ organization }}/Glue/GlueApplication/Bootstrap"

              template:
                  value: "Spryker/Glue/BackendApi/GlueBackendApiBootstrap.php.twig"
    - AddFileFromTemplate:
          condition: "applicationType === 'Storefront'"
          arguments:
              targetFilename:
                value: "GlueStorefrontApiBootstrap.php"

              targetPath:
                value: "src/{{ organization }}/Glue/GlueApplication/Bootstrap"

              template:
                value: "Spryker/Glue/StorefrontApi/GlueStorefrontApiBootstrap.php.twig"

    # Add GlueApplicationDependencyProvider
    -   AddGlueCommonDependencyProvider:
          arguments:
              module:
                  value: "GlueApplication"
    # Methods for the GlueApplicationDependencyProvider
    - AddMethod:
          arguments:
              target:
                  value: "\\{{ organization }}\\Glue\\GlueApplication\\GlueApplicationDependencyProvider"
              method:
                  value: "getGlueApplicationBootstrapPlugins"
              body:
                  value: "return [];"
              output:
                  value: "array<\\Spryker\\Glue\\GlueApplicationExtension\\Dependency\\Plugin\\GlueApplicationBootstrapPluginInterface>"
              withInterface:
                  value: false
    - AddMethod:
          arguments:
              target:
                  value: "\\{{ organization }}\\Glue\\GlueApplication\\GlueApplicationDependencyProvider"
              method:
                  value: "getGlueContextExpanderPlugins"
              body:
                  value: "return [];"
              output:
                  value: "array<\\Spryker\\Glue\\GlueApplicationExtension\\Dependency\\Plugin\\GlueContextExpanderPluginInterface>"
              withInterface:
                  value: false
    - AddMethod:
          arguments:
              target:
                  value: "\\{{ organization }}\\Glue\\GlueApplication\\GlueApplicationDependencyProvider"
              method:
                  value: "getCommunicationProtocolPlugins"
              body:
                  value: "return [];"
              output:
                  value: "array<\\Spryker\\Glue\\GlueApplicationExtension\\Dependency\\Plugin\\CommunicationProtocolPluginInterface>"
              withInterface:
                  value: false
    - AddMethod:
          arguments:
              target:
                  value: "\\{{ organization }}\\Glue\\GlueApplication\\GlueApplicationDependencyProvider"
              method:
                  value: "getConventionPlugins"
              body:
                  value: "return [];"
              output:
                  value: "array<\\Spryker\\Glue\\GlueApplicationExtension\\Dependency\\Plugin\\ApiConventionPluginInterface>"
              withInterface:
                  value: false
    - AddMethod:
          arguments:
              target:
                  value: "\\{{ organization }}\\Glue\\GlueApplication\\GlueApplicationDependencyProvider"
              method:
                  value: "getResourceFilterPlugins"
              body:
                  value: "return [];"
              output:
                  value: "array<\\Spryker\\Glue\\GlueApplicationExtension\\Dependency\\Plugin\\ResourceFilterPluginInterface>"
              withInterface:
                  value: false

    # Add Glue{{ applicationType }}ApiApplication
    - AddGlueDependencyProvider:
          arguments:
              module:
                  value: "Glue{{ applicationType }}ApiApplication"

    # Methods for the GlueApiApplicationDependencyProvider
    - AddMethod:
          arguments:
              target:
                  value: "\\{{ organization }}\\Glue\\Glue{{ applicationType }}ApiApplication\\Glue{{ applicationType }}ApiApplicationDependencyProvider"
              method:
                  value: "getApplicationPlugins"
              body:
                  value: "return [];"
              output:
                  value: "array<\\Spryker\\Shared\\ApplicationExtension\\Dependency\\Plugin\\ApplicationPluginInterface>"
              withInterface:
                  value: false
    - AddMethod:
          arguments:
              target:
                  value: "\\{{ organization }}\\Glue\\Glue{{ applicationType }}ApiApplication\\Glue{{ applicationType }}ApiApplicationDependencyProvider"
              method:
                  value: "getRequestBuilderPlugins"
              body:
                  value: "return [];"
              output:
                  value: "array<\\Spryker\\Glue\\GlueApiApplicationExtension\\Dependency\\Plugin\\RequestBuilderPluginInterface>"
              withInterface:
                  value: false
    - AddMethod:
          arguments:
              target:
                  value: "\\{{ organization }}\\Glue\\Glue{{ applicationType }}ApiApplication\\Glue{{ applicationType }}ApiApplicationDependencyProvider"
              method:
                  value: "getRequestAfterRoutingValidatorPlugins"
              body:
                  value: "return [];"
              output:
                  value: "array<\\Spryker\\Glue\\GlueApplicationExtension\\Dependency\\Plugin\\RequestAfterRoutingValidatorPluginInterface>"
              withInterface:
                  value: false
    - AddMethod:
          arguments:
              target:
                  value: "\\{{ organization }}\\Glue\\Glue{{ applicationType }}ApiApplication\\Glue{{ applicationType }}ApiApplicationDependencyProvider"
              method:
                  value: "getResponseFormatterPlugins"
              body:
                  value: "return [];"
              output:
                  value: "array<\\Spryker\\Glue\\GlueApiApplicationExtension\\Dependency\\Plugin\\ResponseFormatterPluginInterface>"
              withInterface:
                  value: false
    - AddMethod:
          arguments:
              target:
                  value: "\\{{ organization }}\\Glue\\Glue{{ applicationType }}ApiApplication\\Glue{{ applicationType }}ApiApplicationDependencyProvider"
              method:
                  value: "getResourcePlugins"
              body:
                  value: "return [];"
              output:
                  value: "array<\\Spryker\\Glue\\GlueApplicationExtension\\Dependency\\Plugin\\ResourceInterface>"
              withInterface:
                  value: false
    - AddMethod:
          arguments:
              target:
                  value: "\\{{ organization }}\\Glue\\Glue{{ applicationType }}ApiApplication\\Glue{{ applicationType }}ApiApplicationDependencyProvider"
              method:
                  value: "getRouteProviderPlugins"
              body:
                  value: "return [];"
              output:
                  value: "array<\\Spryker\\Glue\\Glue{{ applicationType }}ApiApplicationExtension\\Dependency\\Plugin\\RouteProviderPluginInterface>"
              withInterface:
                  value: false

    # Wire Plugins
    # Wire GlueApplicationDependencyProvider plugins
    - WirePlugin:
          arguments:
              plugin:
                  value: "\\Spryker\\Glue\\Glue{{ applicationType }}ApiApplication\\Plugin\\GlueApplication\\{{ applicationType }}ApiGlueApplicationBootstrapPlugin"
              target:
                  value: "\\{{ organization }}\\Glue\\GlueApplication\\GlueApplicationDependencyProvider::getGlueApplicationBootstrapPlugins"
    - WirePlugin:
          condition: "apiType === 'JSON'"
          arguments:
              plugin:
                  value:
                      - "\\Spryker\\Glue\\GlueJsonApiConvention\\Plugin\\GlueApplication\\JsonApiConventionPlugin"
              target:
                  value: "\\{{ organization }}\\Glue\\GlueApplication\\GlueApplicationDependencyProvider::getConventionPlugins"

    # Wire Glue{{ applicationType }}ApiApplication plugins
    - WirePlugin:
          condition: "applicationType === 'Backend'"
          arguments:
              plugin:
                  value: "\\Spryker\\Zed\\Propel\\Communication\\Plugin\\Application\\PropelApplicationPlugin"
              target:
                  value: "\\{{ organization }}\\Glue\\Glue{{ applicationType }}ApiApplication\\Glue{{ applicationType }}ApiApplicationDependencyProvider::getApplicationPlugins"
