spryk: wrapper
description: "Adds code to be able to receive a Glue request for a resource with a given HTTP method and to return a defined response."
mode: both
level: 2
application: Glue

priority: 1

arguments:
    module:
        inherit: true

    zedModule:
        inherit: true
        description: "The module name for the Zed Application. It's the same name as for the Glue Module but without the Api suffix."
        value: "{{ module | removeBackendApiSuffix | singularize }}"

    organization:
        inherit: true
        default: Spryker

    apiType:
        inherit: true
        description: "Can be one of: REST or JSON"
        default: "json"

    applicationType:
        inherit: true
        description: "Can be one of: Backend or Frontend"
        default: "Backend"

    isBulk:
        description: "Defines if this resource should work with Collections. When set to true the method will use collections when possible."
        value: false

    resource:
        inherit: true
        description: "Defines the resource name this controller will work with e.g. /customers"

    httpMethod:
        description: "The HTTP method e.g. POST"

    responseCode:
        description: "The response code e.g. 200 (Ok)"

    controller:
        value: "{{ resource | singularize | dashToCamelCase | ucfirst }}ResourceController"

    zedDomainEntity:
        description: "Defines the domainEntity used on Zed side for the CRUD Facade. It will be used to create all needed Transfer Objects."
        value: "{{ resource | singularize | dashToCamelCase | ucfirst }}"

    resourceDataObject:
        description: "Defines the Transfer that will be used in the Controller. Do not use Transfer as suffix, it will be added automatically. Example: Customer (ok) CustomerTransfer (wrong)."
        value: "{{ resource | singularize | dashToCamelCase | ucfirst }}"

postSpryks:
    # Add the controller method to handle the request
    - AddGlueBackendApiControllerMethodGet:
          condition: "applicationType === 'Backend' && httpMethod === 'get'"
    - AddGlueBackendApiControllerMethodGetCollection:
          condition: "applicationType === 'Backend' && httpMethod === 'get' && isBulk === true"
    - AddGlueBackendApiControllerMethodPost:
          condition: "applicationType === 'Backend' && httpMethod === 'post'"
    - AddGlueBackendApiControllerMethodPatch:
          condition: "applicationType === 'Backend' && httpMethod === 'patch'"
    - AddGlueBackendApiControllerMethodDelete:
          condition: "applicationType === 'Backend' && httpMethod === 'delete'"
    - AddGlueBackendApiControllerMethodDeleteCollection:
          condition: "applicationType === 'Backend' && httpMethod === 'delete' && isBulk === true"
    # Update ResourcePlugin with new method
#    - AddBackendApiResourceMethod:
#          condition: "applicationType === 'Backend'"
#          arguments:
#              method:
#                  value: "{{ method | strtolower }}{% if isBulk == true %}Collection{% endif %}"
    # Add tests for the resource + method + response code
    - AddClass:
          arguments:
              classNameShort:
                  value: "{{ controller }}"
              isTestClass:
                  value: true
    - AddMethod:
          arguments:
              method:
                  value: "test{{ resource }}{{ httpMethod }}{% if isBulk == true %}CollectionReturnsResponseCode{{ responseCode }}"
              body:
                  value: "$this->markTestIncomplete('Please implement me.');"
              target:
                  value: "\\{{ organization }}Test\\{{ application }}\\{{ module }}\\{{ resource }}ResourceControllerTest"

