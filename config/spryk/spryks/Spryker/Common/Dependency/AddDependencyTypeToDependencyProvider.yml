spryk: method
description: 'Adds a dependency type (Facade, Client, Service) to the *module*DependencyProvider.'
mode: both
level: 1
arguments:
    module:
        inherit: true
    organization:
        inherit: true
        default: Spryker
    application:
        inherit: true
    dependentModule:
        inherit: true
    dependencyType:
        description: 'Can be one of: Facade, Client, Service'
        inherit: true
    applicationType:
        inherit: true
        default: Backend
    layer:
        description: 'Optional, only needed for Zed dependency provider. Can be one of: Communication, Business, Persistence.'
        isOptional: true
    provideMethod:
        description: 'The callback decides based on the application + the optional layer which provide* method will be used.'
        callback: DependencyProviderProvideMethod
    methods:
        description: 'The methods from the dependency type (Facade, Client, Service) that needs to be added to the bridge (only on core level).'
        isOptional: true
        isMultiple: true
    input:
        value: '\Spryker\{{ application }}\Kernel\{% if application.value == ''Glue'' %}{{ applicationType }}\{% endif %}Container $container'
    output:
        value: '\Spryker\{{ application }}\Kernel\{% if application.value == ''Glue'' %}{{ applicationType }}\{% endif %}Container'
    method:
        description: 'Adds one of addFooBarFacade, addFooBarClient, addFooBarService.'
        value: 'add{{ dependentModule | ucfirst }}{{ dependencyType | ucfirst }}'
    visibility:
        value: protected
    template:
        description: 'Based on the mode (project|core) it will render the method with bridge or without.'
        value: Common/Dependency/DependencyProviderMethod.php.twig
    target:
        value: '\{{ organization }}\{{ application }}\{{ module }}\{{ module }}DependencyProvider'
preSpryks:
    - AddDependencyProviderProvideMethod
postSpryks:
    - AddDependencyBridgeMethod
    - AddClientFactory
    - AddGlueFactory
    - AddServiceFactory
    - AddZedBusinessFactory
    - AddZedCommunicationFactory
    -
        AddMethod:
            condition: 'application !== ''Zed'''
            arguments:
                method: 'get{{dependentModule | ucfirst }}{{ dependencyType | ucfirst }}'
                body: 'return $this->getProvidedDependency(\{{ organization }}\{{ application }}\{{ module }}\{{ module }}DependencyProvider::{{ dependencyType | upper }}_{{ dependentModule | camelCaseToUnderscore | upper }});'
                output:
                    description: 'Depending on the layer the output will be defined by the callback. For core the output will be the bridge for project the dependency directly.'
                    callback: DependencyFactoryMethodReturn
                target: '\{{ organization }}\{{ application }}\{{ module }}\{{ module }}Factory'
                withInterface: false
                visibility: public
    -
        AddMethod:
            condition: 'application === ''Zed'''
            arguments:
                method: 'get{{dependentModule | ucfirst }}{{ dependencyType | ucfirst }}'
                body: 'return $this->getProvidedDependency(\{{ organization }}\{{ application }}\{{ module }}\{{ module }}DependencyProvider::{{ dependencyType | upper }}_{{ dependentModule | camelCaseToUnderscore | upper }});'
                output:
                    description: 'Depending on the layer the output will be defined by the callback. For core the output will be the bridge for project the dependency directly.'
                    callback: DependencyFactoryMethodReturn
                target: '\{{ organization }}\{{ application }}\{{ module }}\{{ layer }}\{{ module }}{{ layer }}Factory'
                withInterface: false
    - AddDependencyTypeToDependencyProviderProvideMethod
    -
        AddConstant:
            arguments:
                name: '{{ dependencyType | upper }}_{{ dependentModule | camelCaseToUnderscore | upper }}'
                value: '{{ dependencyType | upper }}_{{ dependentModule | camelCaseToUnderscore | upper }}'
                visibility: public
