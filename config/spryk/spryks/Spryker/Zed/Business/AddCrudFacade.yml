spryk: wrapper
description: 'Adds CRUD code for a Domain Entity.'
priority: 1
mode: both
level: 2
arguments:
    organization:
        inherit: true
        default: Spryker
    application:
        inherit: true
        value: Zed
    module:
        inherit: true
    domainEntity: ~
excludedSpryks:
    - AddZedPresentationTwig
    - AddZedNavigationNode
postSpryks:
    - AddZedDomainEntityDeleter
    - AddZedDomainEntityCreator
    - AddZedDomainEntityReader
    - AddZedDomainEntityUpdater
    - AddDomainEntityValidator
    - AddSharedDomainEntityFetchingTransferDefinition
    - AddSharedDomainEntityManipulationTransferDefinition
    - AddDomainEntityTestHelper
    -
        AddZedPersistenceRepositoryMethod:
            arguments:
                repositoryMethod: 'get{{ domainEntity }}Collection'
                input: '\Generated\Shared\Transfer\{{ domainEntity }}CriteriaTransfer ${{ domainEntity | lcfirst }}CriteriaTransfer'
                output: '\Generated\Shared\Transfer\{{ domainEntity }}CollectionTransfer'
                domainEntity:
                    inherit: true
                body: Zed/Persistence/Repository/DomainEntity/GetCollectionMethod.php.twig
    -
        AddZedPersistenceRepositoryMethod:
            arguments:
                visibility: protected
                repositoryMethod: 'apply{{ domainEntity }}Filters'
                input:
                    - '\Orm\Zed\{{ module }}\Persistence\Spy{{ domainEntity }}Query ${{ domainEntity | lcfirst }}Query'
                    - '\Generated\Shared\Transfer\{{ domainEntity }}CriteriaTransfer ${{ domainEntity | lcfirst }}CriteriaTransfer'
                output: '\Orm\Zed\{{ module }}\Persistence\Spy{{ domainEntity }}Query'
                domainEntity:
                    inherit: true
                body: Zed/Persistence/Repository/DomainEntity/ApplyFiltersMethod.php.twig
            excludedSpryks:
                - AddZedPersistenceRepositoryInterfaceMethod
    -
        AddZedPersistenceRepositoryMethod:
            arguments:
                repositoryMethod: 'get{{ domainEntity }}DeleteCollection'
                input: '\Generated\Shared\Transfer\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer'
                output: '\Generated\Shared\Transfer\{{ domainEntity }}CollectionTransfer'
                domainEntity:
                    inherit: true
                body: Zed/Persistence/Repository/DomainEntity/GetDeleteCollectionMethod.php.twig
    -
        AddZedPersistenceRepositoryMethod:
            arguments:
                repositoryMethod: 'apply{{ domainEntity }}Pagination'
                visibility: protected
                input:
                    - '\Orm\Zed\{{ module }}\Persistence\Spy{{ domainEntity }}Query ${{ domainEntity | lcfirst }}Query'
                    - '\Generated\Shared\Transfer\PaginationTransfer $paginationTransfer'
                output: \Propel\Runtime\ActiveQuery\ModelCriteria
                domainEntity:
                    inherit: true
                body: Zed/Persistence/Repository/DomainEntity/ApplyPagination.php.twig
            excludedSpryks:
                - AddZedPersistenceRepositoryInterfaceMethod
    -
        AddZedPersistenceRepositoryMethod:
            arguments:
                repositoryMethod: 'apply{{ domainEntity }}Sorting'
                visibility: protected
                input:
                    - '\Orm\Zed\{{ module }}\Persistence\Spy{{ domainEntity }}Query ${{ domainEntity | lcfirst }}Query'
                    - '\Generated\Shared\Transfer\{{ domainEntity }}CriteriaTransfer ${{ domainEntity | lcfirst }}CriteriaTransfer'
                output: '\Orm\Zed\{{ module }}\Persistence\Spy{{ domainEntity }}Query'
                domainEntity:
                    inherit: true
                body: Zed/Persistence/Repository/DomainEntity/ApplySorting.php.twig
            excludedSpryks:
                - AddZedPersistenceRepositoryInterfaceMethod
    -
        AddZedPersistenceRepositoryMethod:
            arguments:
                repositoryMethod: 'apply{{ domainEntity }}DeleteFilters'
                visibility: protected
                input:
                    - '\Orm\Zed\{{ module }}\Persistence\Spy{{ domainEntity }}Query ${{ domainEntity | lcfirst }}Query'
                    - '\Generated\Shared\Transfer\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer'
                output: '\Orm\Zed\{{ module }}\Persistence\Spy{{ domainEntity }}Query'
                domainEntity:
                    inherit: true
                body: Zed/Persistence/Repository/DomainEntity/ApplyDeleteFiltersMethod.php.twig
            excludedSpryks:
                - AddZedPersistenceRepositoryInterfaceMethod
    -
        AddZedPersistenceRepositoryMethod:
            arguments:
                repositoryMethod: buildQueryByConditions
                visibility: protected
                input:
                    - 'array $conditions'
                    - '\Orm\Zed\{{ module }}\Persistence\Spy{{ domainEntity }}Query ${{ domainEntity | lcfirst }}Query'
                output: '\Orm\Zed\{{ module }}\Persistence\Spy{{ domainEntity }}Query'
                domainEntity:
                    inherit: true
                body: Zed/Persistence/Repository/DomainEntity/BuildQueryByConditions.php.twig
            excludedSpryks:
                - AddZedPersistenceRepositoryInterfaceMethod
    -
        AddZedBusinessFacadeMethod:
            excludedSpryks:
                - AddZedBusinessFacadeMethodTest
            arguments:
                facadeMethod: 'get{{ domainEntity }}Collection'
                input: '\Generated\Shared\Transfer\{{ domainEntity }}CriteriaTransfer ${{ domainEntity | lcfirst }}CriteriaTransfer'
                output: '\Generated\Shared\Transfer\{{ domainEntity }}CollectionTransfer'
                body: 'return $this->getFactory()->create{{ domainEntity }}Reader()->get{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CriteriaTransfer);'
                specification:
                    - '- Fetches collection of {{ domainEntity | pluralize }} from the storage.'
                    - '- Uses `{{ domainEntity }}CriteriaTransfer.{{ domainEntity }}Conditions.{{ domainEntity | lcfirst }}Ids` to filter {{ domainEntity | lcfirst | pluralize}} by {{ domainEntity | lcfirst }}Ids.'
                    - '- Uses `{{ domainEntity }}CriteriaTransfer.{{ domainEntity }}Conditions.uuids` to filter {{ domainEntity | lcfirst | pluralize}} by uuids.'
                    - '- Uses `{{ domainEntity }}CriteriaTransfer.SortTransfer.field` to set the `order by` field.'
                    - '- Uses `{{ domainEntity }}CriteriaTransfer.SortTransfer.isAscending` to set ascending order otherwise will be used descending order.'
                    - '- Uses `{{ domainEntity }}CriteriaTransfer.PaginationTransfer.{limit, offset}` to paginate result with limit and offset.'
                    - '- Uses `{{ domainEntity }}CriteriaTransfer.PaginationTransfer.{page, maxPerPage}` to paginate result with page and maxPerPage.'
                    - '- Executes `{{domainEntity}}ExpanderPluginInterface` before return the collection transfer.'
                    - '- Returns `{{ domainEntity }}CollectionTransfer` filled with found {{ domainEntity | lcfirst | pluralize}}.'
    -
        AddZedBusinessFacadeMethod:
            excludedSpryks:
                - AddZedBusinessFacadeMethodTest
            arguments:
                facadeMethod: 'create{{ domainEntity }}Collection'
                input: '\Generated\Shared\Transfer\{{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer'
                output: '\Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer'
                body: 'return $this->getFactory()->create{{ domainEntity }}Creator()->create{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);'
                specification:
                    - '- Stores collection of {{ domainEntity | pluralize }} to the storage.'
                    - '- Uses `{{ domainEntity }}ValidatorInterface` to validate `{{ domainEntity }}Transfer` before save.'
                    - '- Uses `{{ domainEntity }}ValidatorRulePluginInterface` to validate `{{ domainEntity }}Transfer` before save.'
                    - '- Executes pre-create `{{ domainEntity }}CreatePluginInterface` before create the `{{ domainEntity }}Transfer`.'
                    - '- Executes post-create `{{ domainEntity }}CreatePluginInterface` after create the `{{ domainEntity }}Transfer`.'
                    - '- Returns `{{ domainEntity }}CollectionResponseTransfer.{{ domainEntity }}Transfer[]` filled with created {{ domainEntity | lcfirst | pluralize}}.'
                    - '- Returns `{{ domainEntity }}CollectionResponseTransfer.ErrorTransfer[]` filled with validation errors.'
    -
        AddZedBusinessFacadeMethod:
            excludedSpryks:
                - AddZedBusinessFacadeMethodTest
            arguments:
                facadeMethod: 'update{{ domainEntity }}Collection'
                input: '\Generated\Shared\Transfer\{{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer'
                output: '\Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer'
                body: 'return $this->getFactory()->create{{ domainEntity }}Updater()->update{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);'
                specification:
                    - '- Updates collection of {{ domainEntity | pluralize }} in the storage.'
                    - '- Uses `{{ domainEntity }}ValidatorInterface` to validate `{{ domainEntity }}Transfer` before save.'
                    - '- Uses `{{ domainEntity }}ValidatorRulePluginInterface` to validate `{{ domainEntity }}Transfer` before save.'
                    - '- Executes pre-update `{{ domainEntity }}UpdatePluginInterface` before update the `{{ domainEntity }}Transfer`.'
                    - '- Executes post-update `{{ domainEntity }}UpdatePluginInterface` after update the `{{ domainEntity }}Transfer`.'
                    - '- Returns `{{ domainEntity }}CollectionResponseTransfer.{{ domainEntity }}Transfer[]` filled with updated {{ domainEntity | lcfirst | pluralize}}.'
                    - '- Returns `{{ domainEntity }}CollectionResponseTransfer.ErrorTransfer[]` filled with validation errors.'
    -
        AddZedBusinessFacadeInterfaceMethod:
            arguments:
                facadeMethod: 'delete{{ domainEntity }}Collection'
                input: '\Generated\Shared\Transfer\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer'
                output: '\Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer'
                specification:
                    - '- Deletes collection of {{ domainEntity | pluralize }} from the storage by delete criteria.'
                    - '- Uses `{{ domainEntity }}CollectionDeleteCriteriaTransfer.{{ domainEntity | lcfirst }}Ids` to filter {{ domainEntity | lcfirst | pluralize}} by {{ domainEntity | lcfirst }}Ids.'
                    - '- Uses `{{ domainEntity }}CollectionDeleteCriteriaTransfer.uuids` to filter {{ domainEntity | lcfirst | pluralize}} by uuids.'
                    - '- Uses `{{ domainEntity }}CollectionDeleteCriteriaTransfer.isTransactional` to make transactional delete.'
                    - '- Returns `{{ domainEntity }}CollectionResponseTransfer.{{ domainEntity }}Transfer[]` filled with deleted {{ domainEntity | lcfirst | pluralize}}.'
    -
        AddZedBusinessFacadeMethod:
            excludedSpryks:
                - AddZedBusinessFacadeMethodTest
            arguments:
                facadeMethod: 'delete{{ domainEntity }}Collection'
                input: '\Generated\Shared\Transfer\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer'
                output: '\Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer'
                body: 'return $this->getFactory()->create{{ domainEntity }}Deleter()->delete{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer);'
                specification:
                    - '- Removes collection of {{ domainEntity | pluralize }} from the storage.'
    -
        AddZedDependencyPlugins:
            arguments:
                visibility: protected
                type: '{{ domainEntity }}PreCreate'
                output: '\{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Writer\{{ domainEntity }}CreatePluginInterface[]'
    -
        AddZedDependencyPlugins:
            arguments:
                visibility: protected
                type: '{{ domainEntity }}PostCreate'
                output: '\{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Writer\{{ domainEntity }}CreatePluginInterface[]'
    -
        AddZedDependencyPlugins:
            arguments:
                visibility: protected
                type: '{{ domainEntity }}PreUpdate'
                output: '\{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Writer\{{ domainEntity }}UpdatePluginInterface[]'
    -
        AddZedDependencyPlugins:
            arguments:
                visibility: protected
                type: '{{ domainEntity }}PostUpdate'
                output: '\{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Writer\{{ domainEntity }}UpdatePluginInterface[]'
    -
        AddZedDependencyPlugins:
            arguments:
                visibility: protected
                type: '{{ domainEntity }}Expander'
                output: '\{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Expander\{{ domainEntity }}ExpanderPluginInterface[]'
    -
        AddZedDependencyPlugins:
            arguments:
                visibility: protected
                type: '{{ domainEntity }}CreateValidatorRule'
                output: '\{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Validator\{{ domainEntity }}ValidatorRulePluginInterface[]'
    -
        AddZedDependencyPlugins:
            arguments:
                visibility: protected
                type: '{{ domainEntity }}UpdateValidatorRule'
                output: '\{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Validator\{{ domainEntity }}ValidatorRulePluginInterface[]'
    -
        AddDomainEntityExtensionInterfaceMethod:
            arguments:
                className: '{{ domainEntity }}ExpanderPlugin'
                subDirectory: 'Plugin/{{ domainEntity }}/Expander'
                modelMethod: expand
                input: '\Generated\Shared\Transfer\{{ domainEntity }}Transfer[] ${{ domainEntity | lcfirst }}Transfers'
                output: '\Generated\Shared\Transfer\{{ domainEntity }}Transfer[]'
                specification:
                    - '- Expands `{{ domainEntity }}Transfer[]` after reading them.'
                    - '- Returns expanded `{{ domainEntity }}Transfer[]`.'
    -
        AddDomainEntityExtensionInterfaceMethod:
            arguments:
                className: '{{ domainEntity }}CreatePlugin'
                subDirectory: 'Plugin/{{ domainEntity }}/Writer'
                modelMethod: execute
                input: '\Generated\Shared\Transfer\{{ domainEntity }}Transfer[] ${{ domainEntity | lcfirst }}Transfers'
                output: '\Generated\Shared\Transfer\{{ domainEntity }}Transfer[]'
                specification:
                    - '- Executes plugin for `{{ domainEntity }}Transfer[]` before or after create them.'
                    - '- Returns mapped `{{ domainEntity }}Transfer[]`.'
    -
        AddDomainEntityExtensionInterfaceMethod:
            arguments:
                className: '{{ domainEntity }}UpdatePlugin'
                subDirectory: 'Plugin/{{ domainEntity }}/Writer'
                modelMethod: execute
                input: '\Generated\Shared\Transfer\{{ domainEntity }}Transfer[] ${{ domainEntity | lcfirst }}Transfers'
                output: '\Generated\Shared\Transfer\{{ domainEntity }}Transfer[]'
                specification:
                    - '- Executes plugin for `{{ domainEntity }}Transfer[]` before or after update them.'
                    - '- Returns mapped `{{ domainEntity }}Transfer[]`.'
    -
        AddDomainEntityExtensionInterfaceMethod:
            arguments:
                className: '{{ domainEntity }}ValidatorRulePlugin'
                subDirectory: 'Plugin/{{ domainEntity }}/Validator'
                modelMethod: validate
                input: '\Generated\Shared\Transfer\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst }}Transfer'
                output: 'string[]'
                specification:
                    - '- Validates the `{{ domainEntity }}Transfer`.'
                    - '- Returns an array with errors for the `{{ domainEntity }}Transfer`.'
    -
        AddZedPersistencePropelSchemaProperty:
            arguments:
                name: 'spy_{{ domainEntity | underscored }}'
                propertyName: 'id_{{ domainEntity | underscored }}'
                propertyType: INTEGER
                required: 'true'
                autoIncrement: 'true'
                primaryKey: 'true'
    -
        AddZedPersistencePropelSchemaProperty:
            arguments:
                name: 'spy_{{ domainEntity | underscored }}'
                propertyName: uuid
                propertyType: CHAR
                size: 36
    -
        AddZedPersistencePropelSchemaUuid:
            arguments:
                propertyName: uuid
                uuidBehaviorKeyColumnsParameter: 'id_{{ domainEntity | underscored }}'
    -
        AddDataBuilderDefinition:
            arguments:
                name: '{{ domainEntity }}'
    -
        AddZedBusinessFactoryMethod:
            arguments:
                factoryMethod: 'create{{ domainEntity }}IdentifierBuilder'
                className: '{{ domainEntity }}IdentifierBuilder'
                interfaceName: '\{{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\IdentifierBuilder\{{ domainEntity }}IdentifierBuilderInterface'
                output: '\{{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\IdentifierBuilder\{{ domainEntity }}IdentifierBuilderInterface'
                subDirectory: '{{ domainEntity }}/IdentifierBuilder'
    -
        AddZedBusinessFactoryMethod:
            arguments:
                factoryMethod: 'create{{ domainEntity }}CreateValidator'
                className: '{{ domainEntity }}Validator'
                interfaceName: '\{{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\Validator\{{ domainEntity }}ValidatorInterface'
                output: '\{{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\Validator\{{ domainEntity }}ValidatorInterface'
                subDirectory: '{{ domainEntity }}/Validator'
                dependencyMethods:
                    - 'get{{ domainEntity }}CreateValidatorRules'
                    - 'get{{ domainEntity }}CreateValidatorRulePlugins'
                    - 'create{{ domainEntity }}IdentifierBuilder'
    -
        AddZedBusinessFactoryMethod:
            arguments:
                factoryMethod: 'get{{ domainEntity }}CreateValidatorRules'
                className: '{{ domainEntity }}Validator'
                interfaceName: '\{{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\Validator\Rules\{{ domainEntity }}ValidatorRuleInterface[]'
                output: '\{{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\Validator\Rules\{{ domainEntity }}ValidatorRuleInterface[]'
                body: 'return [];'
    -
        AddZedBusinessFactoryMethod:
            arguments:
                factoryMethod: 'create{{ domainEntity }}UpdateValidator'
                className: '{{ domainEntity }}Validator'
                interfaceName: '\{{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\Validator\{{ domainEntity }}ValidatorInterface'
                output: '\{{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\Validator\{{ domainEntity }}ValidatorInterface'
                subDirectory: '{{ domainEntity }}/Validator'
                dependencyMethods:
                    - 'get{{ domainEntity }}UpdateValidatorRules'
                    - 'get{{ domainEntity }}UpdateValidatorRulePlugins'
                    - 'create{{ domainEntity }}IdentifierBuilder'
    -
        AddZedBusinessFactoryMethod:
            arguments:
                factoryMethod: 'get{{ domainEntity }}UpdateValidatorRules'
                subDirectory: '{{ domainEntity }}/Validator'
                className: '{{ domainEntity }}Validator'
                interfaceName: '\{{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\Validator\Rules\{{ domainEntity }}ValidatorRuleInterface[]'
                output: '\{{ organization }}\Zed\{{ module }}\Business\{{ domainEntity }}\Validator\Rules\{{ domainEntity }}ValidatorRuleInterface[]'
                body: 'return [];'
    -
        AddZedBusinessFactoryGetProvidedDependencyMethod:
            arguments:
                factoryMethod: 'get{{ domainEntity }}ExpanderPlugins'
                constantName: 'PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_EXPANDER'
                output: '\{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Expander\{{ domainEntity }}ExpanderPluginInterface[]'
    -
        AddZedBusinessFactoryGetProvidedDependencyMethod:
            arguments:
                factoryMethod: 'get{{ domainEntity }}PreCreatePlugins'
                constantName: 'PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_PRE_CREATE'
                output: '\{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Writer\{{ domainEntity }}CreatePluginInterface[]'
            excludedSpryks:
                - AddZedDependencyProviderConstant
    -
        AddZedBusinessFactoryGetProvidedDependencyMethod:
            arguments:
                factoryMethod: 'get{{ domainEntity }}PostCreatePlugins'
                constantName: 'PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_POST_CREATE'
                output: '\{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Writer\{{ domainEntity }}CreatePluginInterface[]'
            excludedSpryks:
                - AddZedDependencyProviderConstant
    -
        AddZedBusinessFactoryGetProvidedDependencyMethod:
            arguments:
                factoryMethod: 'get{{ domainEntity }}PreUpdatePlugins'
                constantName: 'PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_PRE_UPDATE'
                output: '\{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Writer\{{ domainEntity }}UpdatePluginInterface[]'
            excludedSpryks:
                - AddZedDependencyProviderConstant
    -
        AddZedBusinessFactoryGetProvidedDependencyMethod:
            arguments:
                factoryMethod: 'get{{ domainEntity }}PostUpdatePlugins'
                constantName: 'PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_POST_UPDATE'
                output: '\{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Writer\{{ domainEntity }}UpdatePluginInterface[]'
            excludedSpryks:
                - AddZedDependencyProviderConstant
    -
        AddZedBusinessFactoryGetProvidedDependencyMethod:
            arguments:
                factoryMethod: 'get{{ domainEntity }}CreateValidatorRulePlugins'
                constantName: 'PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_CREATE_VALIDATOR_RULE'
                output: '\{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Validator\{{ domainEntity }}ValidatorRulePluginInterface[]'
            excludedSpryks:
                - AddZedDependencyProviderConstant
    -
        AddZedBusinessFactoryGetProvidedDependencyMethod:
            arguments:
                factoryMethod: 'get{{ domainEntity }}UpdateValidatorRulePlugins'
                constantName: 'PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_UPDATE_VALIDATOR_RULE'
                output: '\{{ organization }}\Zed\{{ module }}Extension\Dependency\Plugin\{{ domainEntity }}\Validator\{{ domainEntity }}ValidatorRulePluginInterface[]'
            excludedSpryks:
                - AddZedDependencyProviderConstant
    -
        AddZedDomainEntityPersistenceFactoryMethod:
            arguments:
                fqcnClassName: '\Orm\Zed\{{ module }}\Persistence\Spy{{ domainEntity }}Query'
                factoryMethod: 'create{{ domainEntity }}Query'
                output: '\Orm\Zed\{{ module }}\Persistence\Spy{{ domainEntity }}Query'
    -
        AddZedDomainEntityInterfaceMethod:
            arguments:
                className: '{{ domainEntity }}IdentifierBuilder'
                subDirectory: 'Business/{{ domainEntity }}/IdentifierBuilder'
                modelMethod: buildIdentifier
                input: '\Generated\Shared\Transfer\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst}}Transfer'
                output: string
    -
        AddZedDomainEntityMethod:
            arguments:
                className: '{{ domainEntity }}IdentifierBuilder'
                subDirectory: 'Business/{{ domainEntity }}/IdentifierBuilder'
                modelMethod: buildIdentifier
                input: '\Generated\Shared\Transfer\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst}}Transfer'
                output: string
                body: 'return ${{ domainEntity | lcfirst}}Transfer->getId{{ domainEntity }}() !== null ? (string)${{ domainEntity | lcfirst}}Transfer->getId{{ domainEntity }}() : spl_object_hash(${{ domainEntity | lcfirst}}Transfer);'
    -
        AddZedBusinessFacadeTest:
            arguments:
                template: Zed/Business/CrudFacadeTest.php.twig
                targetFilename: '{{ domainEntity }}CrudFacadeTest.php'
    -
        AddZedPersistenceEntityManagerMethod:
            arguments:
                domainEntity:
                    inherit: true
                entityManagerMethod: 'create{{ domainEntity }}'
                body: Zed/Persistence/EntityManager/DomainEntity/CreateMethod.php.twig
                input: '\Generated\Shared\Transfer\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst }}Transfer'
                output: '\Generated\Shared\Transfer\{{ domainEntity }}Transfer'
    -
        AddZedPersistenceEntityManagerMethod:
            arguments:
                domainEntity:
                    inherit: true
                entityManagerMethod: 'update{{ domainEntity }}'
                body: Zed/Persistence/EntityManager/DomainEntity/UpdateMethod.php.twig
                input: '\Generated\Shared\Transfer\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst }}Transfer'
                output: '\Generated\Shared\Transfer\{{ domainEntity }}Transfer'
    -
        AddZedPersistenceEntityManagerMethod:
            arguments:
                domainEntity:
                    inherit: true
                entityManagerMethod: 'delete{{ domainEntity }}'
                body: Zed/Persistence/EntityManager/DomainEntity/DeleteMethod.php.twig
                input: '\Generated\Shared\Transfer\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst }}Transfer'
                output: '\Generated\Shared\Transfer\{{ domainEntity }}Transfer'
    -
        AddZedPersistenceEntityManagerMethod:
            arguments:
                domainEntity:
                    inherit: true
                entityManagerMethod: 'apply{{ domainEntity }}DeleteFilters'
                visibility: protected
                body: Zed/Persistence/EntityManager/DomainEntity/ApplyDeleteFiltersMethod.php.twig
                input:
                    - '\Orm\Zed\{{ module }}\Persistence\Spy{{ domainEntity }}Query ${{ domainEntity | lcfirst }}Query'
                    - '\Generated\Shared\Transfer\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer'
                output: '\Orm\Zed\{{ module }}\Persistence\Spy{{ domainEntity }}Query'
            excludedSpryks:
                - AddZedPersistenceEntityManagerInterfaceMethod
    -
        AddZedDomainEntity:
            arguments:
                className: '{{ domainEntity }}Mapper'
                subDirectory: 'Persistence/Propel/{{ domainEntity }}/Mapper'
                implements: {  }
                modelMethod: 'map{{ domainEntity }}TransferTo{{ domainEntity }}Entity'
            excludedSpryks:
                - AddZedDomainEntityInterface
    -
        AddZedDomainEntityMethod:
            arguments:
                className: '{{ domainEntity }}Mapper'
                subDirectory: 'Persistence/Propel/{{ domainEntity }}/Mapper'
                modelMethod: 'map{{ domainEntity }}TransferTo{{ domainEntity }}Entity'
                input:
                    - '\Generated\Shared\Transfer\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst }}Transfer'
                    - '\Orm\Zed\{{ module }}\Persistence\Spy{{ domainEntity }} ${{ domainEntity | lcfirst }}Entity'
                output: '\Orm\Zed\{{ module }}\Persistence\Spy{{ domainEntity }}'
                body: 'return ${{ domainEntity | lcfirst }}Entity->fromArray(${{ domainEntity | lcfirst }}Transfer->modifiedToArray());'
            excludedSpryks:
                - AddZedDomainEntityInterfaceMethod
                - AddZedDomainEntityInterface
                - AddZedDomainEntity
    -
        AddZedDomainEntityMethod:
            arguments:
                className: '{{ domainEntity }}Mapper'
                subDirectory: 'Persistence/Propel/{{ domainEntity }}/Mapper'
                modelMethod: 'map{{ domainEntity }}EntityTo{{ domainEntity }}Transfer'
                input:
                    - '\Orm\Zed\{{ module }}\Persistence\Spy{{ domainEntity }} ${{ domainEntity | lcfirst }}Entity'
                    - '\Generated\Shared\Transfer\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst }}Transfer'
                output: '\Generated\Shared\Transfer\{{ domainEntity }}Transfer'
                body: 'return ${{ domainEntity | lcfirst }}Transfer->fromArray(${{ domainEntity | lcfirst }}Entity->toArray(), true);'
            excludedSpryks:
                - AddZedDomainEntityInterfaceMethod
                - AddZedDomainEntityInterface
                - AddZedDomainEntity
    -
        AddZedDomainEntityMethod:
            arguments:
                className: '{{ domainEntity }}Mapper'
                subDirectory: 'Persistence/Propel/{{ domainEntity }}/Mapper'
                modelMethod: 'map{{ domainEntity }}EntityCollectionTo{{ domainEntity }}CollectionResponseTransfer'
                input:
                    - '\Propel\Runtime\Collection\ObjectCollection|\Orm\Zed\{{ module }}\Persistence\Spy{{ domainEntity }}[] ${{ domainEntity | lcfirst }}EntityCollection'
                    - '\Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer ${{ domainEntity | lcfirst }}CollectionResponseTransfer'
                output: '\Generated\Shared\Transfer\{{ domainEntity }}CollectionResponseTransfer'
                body:
                    - 'foreach (${{ domainEntity | lcfirst }}EntityCollection as ${{ domainEntity | lcfirst }}Entity) {'
                    - '    ${{ domainEntity | lcfirst }}CollectionResponseTransfer->add{{ domainEntity }}($this->map{{ domainEntity }}EntityTo{{ domainEntity }}Transfer(${{ domainEntity | lcfirst }}Entity, new {{ domainEntity }}Transfer()));'
                    - '}'
                    - ''
                    - 'return ${{ domainEntity | lcfirst }}CollectionResponseTransfer;'
            excludedSpryks:
                - AddZedDomainEntityInterfaceMethod
                - AddZedDomainEntityInterface
                - AddZedDomainEntity
    -
        AddZedDomainEntityMethod:
            arguments:
                className: '{{ domainEntity }}Mapper'
                subDirectory: 'Persistence/Propel/{{ domainEntity }}/Mapper'
                modelMethod: 'map{{ domainEntity }}EntityCollectionTo{{ domainEntity }}CollectionTransfer'
                input:
                    - '\Propel\Runtime\Collection\ObjectCollection|\Orm\Zed\{{ module }}\Persistence\Spy{{ domainEntity }}[] ${{ domainEntity | lcfirst }}EntityCollection'
                    - '\Generated\Shared\Transfer\{{ domainEntity }}CollectionTransfer ${{ domainEntity | lcfirst }}CollectionTransfer'
                output: '\Generated\Shared\Transfer\{{ domainEntity }}CollectionTransfer'
                body:
                    - 'foreach (${{ domainEntity | lcfirst }}EntityCollection as ${{ domainEntity | lcfirst }}Entity) {'
                    - '    ${{ domainEntity | lcfirst }}CollectionTransfer->add{{ domainEntity }}($this->map{{ domainEntity }}EntityTo{{ domainEntity }}Transfer(${{ domainEntity | lcfirst }}Entity, new {{ domainEntity }}Transfer()));'
                    - '}'
                    - ''
                    - 'return ${{ domainEntity | lcfirst }}CollectionTransfer;'
            excludedSpryks:
                - AddZedDomainEntityInterfaceMethod
                - AddZedDomainEntityInterface
                - AddZedDomainEntity
    -
        AddZedDomainEntityPersistenceFactoryMethod:
            arguments:
                application: Zed
                fqcnClassName: '\{{ organization }}\{{ application }}\{{ module }}\Persistence\Propel\{{ domainEntity }}\Mapper\{{ domainEntity }}Mapper'
                factoryMethod: 'create{{ domainEntity }}Mapper'
                output: '\{{ organization }}\{{ application }}\{{ module }}\Persistence\Propel\{{ domainEntity }}\Mapper\{{ domainEntity }}Mapper'
                body: 'return new \{{ organization }}\{{ application }}\{{ module }}\Persistence\Propel\{{ domainEntity }}\Mapper\{{ domainEntity }}Mapper();'
