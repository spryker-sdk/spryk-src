spryk: wrapper
description: "Adds CRUD code for a Domain Entity."
priority: 1
mode: both
level: 2

arguments:
    organization:
        inherit: true
        default: Spryker

    module:
        inherit: true

    domainEntity: ~

excludedSpryks:
    - AddZedPresentationTwig
    - AddZedNavigationNode

preSpryks:
    - AddModule

postSpryks:
    - AddZedDomainEntityDeleter
    - AddZedDomainEntityCreator
    - AddZedDomainEntityReader
    - AddZedDomainEntityUpdater
    - AddDomainEntityValidator
    # Add transfers
    - AddSharedDomainEntityFetchingTransferDefinition
    - AddSharedDomainEntityManipulationTransferDefinition
    # Add test helper
    - AddDomainEntityTestHelper
    - AddZedPersistenceRepositoryMethod:
        arguments:
            repositoryMethod:
                value: "get{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CriteriaTransfer ${{ domainEntity | lcfirst }}CriteriaTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionTransfer"
            domainEntity:
                inherit: true
            body:
                value: Zed/Persistence/Repository/DomainEntity/GetCollectionMethod.php.twig
    - AddZedPersistenceRepositoryMethod:
        arguments:
            visibility:
                value: "protected"
            repositoryMethod:
                value: "apply{{ domainEntity }}Filters"
            input:
                value:
                    - "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query ${{ domainEntity | lcfirst }}Query"
                    - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CriteriaTransfer ${{ domainEntity | lcfirst }}CriteriaTransfer"
            output:
                value: "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query"
            domainEntity:
                inherit: true
            body:
                value: Zed/Persistence/Repository/DomainEntity/ApplyFiltersMethod.php.twig
        excludedSpryks:
            - AddZedPersistenceRepositoryInterfaceMethod
    - AddZedPersistenceRepositoryMethod:
        arguments:
            repositoryMethod:
                value: "get{{ domainEntity }}DeleteCollection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionTransfer"
            domainEntity:
                inherit: true
            body:
                value: Zed/Persistence/Repository/DomainEntity/GetDeleteCollectionMethod.php.twig
    - AddZedPersistenceRepositoryMethod:
        arguments:
            repositoryMethod:
                value: "apply{{ domainEntity }}Pagination"
            visibility:
                value: "protected"
            input:
                value:
                    - "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query ${{ domainEntity | lcfirst }}Query"
                    - "\\Generated\\Shared\\Transfer\\PaginationTransfer $paginationTransfer"
            output:
                value: "\\Propel\\Runtime\\ActiveQuery\\ModelCriteria"
            domainEntity:
                inherit: true
            body:
                value: Zed/Persistence/Repository/DomainEntity/ApplyPagination.php.twig
        excludedSpryks:
            - AddZedPersistenceRepositoryInterfaceMethod
    - AddZedPersistenceRepositoryMethod:
          arguments:
              repositoryMethod:
                  value: "apply{{ domainEntity }}Sorting"
              visibility:
                  value: "protected"
              input:
                  value:
                      - "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query ${{ domainEntity | lcfirst }}Query"
                      - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CriteriaTransfer ${{ domainEntity | lcfirst }}CriteriaTransfer"
              output:
                  value: "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query"
              domainEntity:
                  inherit: true
              body:
                  value: Zed/Persistence/Repository/DomainEntity/ApplySorting.php.twig
          excludedSpryks:
              - AddZedPersistenceRepositoryInterfaceMethod
    - AddZedPersistenceRepositoryMethod:
        arguments:
            repositoryMethod:
                value: "apply{{ domainEntity }}DeleteFilters"
            visibility:
                value: "protected"
            input:
                value:
                    - "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query ${{ domainEntity | lcfirst }}Query"
                    - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer"
            output:
                value: "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query"
            domainEntity:
                inherit: true
            body:
                value: Zed/Persistence/Repository/DomainEntity/ApplyDeleteFiltersMethod.php.twig
        excludedSpryks:
            - AddZedPersistenceRepositoryInterfaceMethod
    - AddZedPersistenceRepositoryMethod:
        arguments:
            repositoryMethod:
                value: "buildQueryByConditions"
            visibility:
                value: "protected"
            input:
                value:
                    - "array $conditions"
                    - "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query ${{ domainEntity | lcfirst }}Query"
            output:
                value: "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query"
            domainEntity:
                inherit: true
            body:
                value: Zed/Persistence/Repository/DomainEntity/BuildQueryByConditions.php.twig
        excludedSpryks:
            - AddZedPersistenceRepositoryInterfaceMethod
    # Add {{ module }}Facade
    - AddZedBusinessFacadeMethod:
        excludedSpryks:
            - AddZedBusinessFacadeMethodTest
        arguments:
            facadeMethod:
                value: "get{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CriteriaTransfer ${{ domainEntity | lcfirst }}CriteriaTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionTransfer"
            body:
                value: "return $this->getFactory()->create{{ domainEntity }}Reader()->get{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CriteriaTransfer);"
            specification:
                value:
                    - "- Fetches collection of {{ domainEntity | pluralize }} from the storage."
                    - "- Uses `{{ domainEntity }}CriteriaTransfer.{{ domainEntity }}Conditions.{{ domainEntity | lcfirst }}Ids` to filter {{ domainEntity | lcfirst | pluralize}} by {{ domainEntity | lcfirst }}Ids."
                    - "- Uses `{{ domainEntity }}CriteriaTransfer.{{ domainEntity }}Conditions.uuids` to filter {{ domainEntity | lcfirst | pluralize}} by uuids."
                    - "- Uses `{{ domainEntity }}CriteriaTransfer.SortTransfer.field` to set the `order by` field."
                    - "- Uses `{{ domainEntity }}CriteriaTransfer.SortTransfer.isAscending` to set ascending order otherwise will be used descending order."
                    - "- Uses `{{ domainEntity }}CriteriaTransfer.PaginationTransfer.{limit, offset}` to paginate result with limit and offset."
                    - "- Uses `{{ domainEntity }}CriteriaTransfer.PaginationTransfer.{page, maxPerPage}` to paginate result with page and maxPerPage."
                    - "- Executes `{{domainEntity}}ExpanderPluginInterface` before return the collection transfer."
                    - "- Returns `{{ domainEntity }}CollectionTransfer` filled with found {{ domainEntity | lcfirst | pluralize}}."
    - AddZedBusinessFacadeMethod:
        excludedSpryks:
            - AddZedBusinessFacadeMethodTest
        arguments:
            facadeMethod:
                value: "create{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"
            body:
                value: "return $this->getFactory()->create{{ domainEntity }}Creator()->create{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);"
            specification:
                value:
                    - "- Stores collection of {{ domainEntity | pluralize }} to the storage."
                    - "- Uses `{{ domainEntity }}ValidatorInterface` to validate `{{ domainEntity }}Transfer` before save."
                    - "- Uses `{{ domainEntity }}ValidatorRulePluginInterface` to validate `{{ domainEntity }}Transfer` before save."
                    - "- Executes pre-create `{{ domainEntity }}CreatePluginInterface` before create the `{{ domainEntity }}Transfer`."
                    - "- Executes post-create `{{ domainEntity }}CreatePluginInterface` after create the `{{ domainEntity }}Transfer`."
                    - "- Returns `{{ domainEntity }}CollectionResponseTransfer.{{ domainEntity }}Transfer[]` filled with created {{ domainEntity | lcfirst | pluralize}}."
                    - "- Returns `{{ domainEntity }}CollectionResponseTransfer.ErrorTransfer[]` filled with validation errors."
    - AddZedBusinessFacadeMethod:
        excludedSpryks:
            - AddZedBusinessFacadeMethodTest
        arguments:
            facadeMethod:
                value: "update{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"
            body:
                value: "return $this->getFactory()->create{{ domainEntity }}Updater()->update{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);"
            specification:
                value:
                    - "- Updates collection of {{ domainEntity | pluralize }} in the storage."
                    - "- Uses `{{ domainEntity }}ValidatorInterface` to validate `{{ domainEntity }}Transfer` before save."
                    - "- Uses `{{ domainEntity }}ValidatorRulePluginInterface` to validate `{{ domainEntity }}Transfer` before save."
                    - "- Executes pre-update `{{ domainEntity }}UpdatePluginInterface` before update the `{{ domainEntity }}Transfer`."
                    - "- Executes post-update `{{ domainEntity }}UpdatePluginInterface` after update the `{{ domainEntity }}Transfer`."
                    - "- Returns `{{ domainEntity }}CollectionResponseTransfer.{{ domainEntity }}Transfer[]` filled with updated {{ domainEntity | lcfirst | pluralize}}."
                    - "- Returns `{{ domainEntity }}CollectionResponseTransfer.ErrorTransfer[]` filled with validation errors."
    - AddZedBusinessFacadeInterfaceMethod:
        arguments:
            facadeMethod:
                value: "delete{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"
            specification:
                value:
                    - "- Deletes collection of {{ domainEntity | pluralize }} from the storage by delete criteria."
                    - "- Uses `{{ domainEntity }}CollectionDeleteCriteriaTransfer.{{ domainEntity | lcfirst }}Ids` to filter {{ domainEntity | lcfirst | pluralize}} by {{ domainEntity | lcfirst }}Ids."
                    - "- Uses `{{ domainEntity }}CollectionDeleteCriteriaTransfer.uuids` to filter {{ domainEntity | lcfirst | pluralize}} by uuids."
                    - "- Uses `{{ domainEntity }}CollectionDeleteCriteriaTransfer.isTransactional` to make transactional delete."
                    - "- Returns `{{ domainEntity }}CollectionResponseTransfer.{{ domainEntity }}Transfer[]` filled with deleted {{ domainEntity | lcfirst | pluralize}}."
    - AddZedBusinessFacadeMethod:
        excludedSpryks:
            - AddZedBusinessFacadeMethodTest
        arguments:
            facadeMethod:
                value: "delete{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"
            body:
                value: "return $this->getFactory()->create{{ domainEntity }}Deleter()->delete{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer);"
            specification:
                value:
                    - "- Removes collection of {{ domainEntity | pluralize }} from the storage."
    # Add add{{ domainEntity }}PreCreatePlugins, get{{ domainEntity }}PreCreatePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              visibility:
                  value: "protected"
              type:
                  value: "{{ domainEntity }}PreCreate"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\Plugin\\{{ domainEntity }}\\Writer\\{{ domainEntity }}CreatePluginInterface[]"

    # Add add{{ domainEntity }}PostCreatePlugins, get{{ domainEntity }}PostCreatePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              visibility:
                  value: "protected"
              type:
                  value: "{{ domainEntity }}PostCreate"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\Plugin\\{{ domainEntity }}\\Writer\\{{ domainEntity }}CreatePluginInterface[]"

    # Add add{{ domainEntity }}PreUpdatePlugins, get{{ domainEntity }}PreUpdatePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              visibility:
                  value: "protected"
              type:
                  value: "{{ domainEntity }}PreUpdate"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\Plugin\\{{ domainEntity }}\\Writer\\{{ domainEntity }}UpdatePluginInterface[]"

    # Add add{{ domainEntity }}UpdatePostUpdate, get{{ domainEntity }}PostUpdatePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              visibility:
                  value: "protected"
              type:
                  value: "{{ domainEntity }}PostUpdate"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\Plugin\\{{ domainEntity }}\\Writer\\{{ domainEntity }}UpdatePluginInterface[]"

    # Add add{{ domainEntity }}ExpanderPlugins, get{{ domainEntity }}ExpanderPlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              visibility:
                  value: "protected"
              type:
                  value: "{{ domainEntity }}Expander"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\Plugin\\{{ domainEntity }}\\Expander\\{{ domainEntity }}ExpanderPluginInterface[]"

    # Add add{{ domainEntity }}CreateValidatorRulePlugins, get{{ domainEntity }}CreateValidatorRulePlugins and const for the plugins to the DependencyProvider
    -  AddZedDependencyPlugins:
            arguments:
                visibility:
                    value: "protected"
                type:
                    value: "{{ domainEntity }}CreateValidatorRule"
                output:
                    value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\Plugin\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorRulePluginInterface[]"

    # Add add{{ domainEntity }}UpdateValidatorRulePlugins, get{{ domainEntity }}UpdateValidatorRulePlugins and const for the plugins to the DependencyProvider
    -  AddZedDependencyPlugins:
            arguments:
                visibility:
                    value: "protected"
                type:
                    value: "{{ domainEntity }}UpdateValidatorRule"
                output:
                    value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\Plugin\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorRulePluginInterface[]"

    # Creates {{ domainEntity }}ExpanderPluginInterface
    - AddDomainEntityExtensionInterfaceMethod:
          arguments:
              className:
                  value: "{{ domainEntity }}ExpanderPlugin"
              subDirectory:
                  value: "Plugin/{{ domainEntity }}/Expander"
              modelMethod:
                  value: "expand"
              input:
                  value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[] ${{ domainEntity | lcfirst }}Transfers"
              output:
                  value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[]"
              specification:
                  value:
                      - "- Expands `{{ domainEntity }}Transfer[]` after reading them."
                      - "- Returns expanded `{{ domainEntity }}Transfer[]`."

    # Creates {{ domainEntity }}WriterCreatePluginInterface
    - AddDomainEntityExtensionInterfaceMethod:
          arguments:
              className:
                  value: "{{ domainEntity }}CreatePlugin"
              subDirectory:
                  value: "Plugin/{{ domainEntity }}/Writer"
              modelMethod:
                  value: "execute"
              input:
                  value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[] ${{ domainEntity | lcfirst }}Transfers"
              output:
                  value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[]"
              specification:
                  value:
                      - "- Executes plugin for `{{ domainEntity }}Transfer[]` before or after create them."
                      - "- Returns mapped `{{ domainEntity }}Transfer[]`."

    # Creates {{ domainEntity }}WriterUpdatePluginInterface
    - AddDomainEntityExtensionInterfaceMethod:
            arguments:
                className:
                    value: "{{ domainEntity }}UpdatePlugin"
                subDirectory:
                    value: "Plugin/{{ domainEntity }}/Writer"
                modelMethod:
                    value: "execute"
                input:
                    value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[] ${{ domainEntity | lcfirst }}Transfers"
                output:
                    value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[]"
                specification:
                    value:
                        - "- Executes plugin for `{{ domainEntity }}Transfer[]` before or after update them."
                        - "- Returns mapped `{{ domainEntity }}Transfer[]`."

    # Creates {{ domainEntity }}ValidatorRulePluginInterface
    - AddDomainEntityExtensionInterfaceMethod:
          arguments:
              className:
                  value: "{{ domainEntity }}ValidatorRulePlugin"
              subDirectory:
                  value: "Plugin/{{ domainEntity }}/Validator"
              modelMethod:
                  value: "validate"
              input:
                  value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst }}Transfer"
              output:
                  value: "string[]"
              specification:
                  value:
                      - "- Validates the `{{ domainEntity }}Transfer`."
                      - "- Returns an array with errors for the `{{ domainEntity }}Transfer`."
    - AddZedPersistencePropelSchemaProperty:
          arguments:
              name:
                  value: "spy_{{ domainEntity | underscored }}"
              propertyName:
                  value: "id_{{ domainEntity | underscored }}"
              propertyType:
                  value: "INTEGER"
              required:
                  value: "true"
              autoIncrement:
                  value: "true"
              primaryKey:
                value: "true"
    # Add is_active property to "spy_{{ domainEntity }}" entity of the Persistence layer.
    - AddZedPersistencePropelSchemaProperty:
            arguments:
                name:
                    value: "spy_{{ domainEntity | underscored }}"
                propertyName:
                    value: "uuid"
                propertyType:
                    value: "CHAR"
                size:
                    value: 36

    - AddZedPersistencePropelSchemaUuid:
            arguments:
                propertyName:
                    value: "uuid"
                uuidBehaviorKeyColumnsParameter:
                    value: "id_{{ domainEntity | underscored }}"

    # Add add{{ domainEntity }}DataBuilderDefinition for the tests transfer builder
    -   AddDataBuilderDefinition:
            arguments:
                name:
                    value: "{{ domainEntity }}"
    - AddZedBusinessFactoryMethod:
          arguments:
              factoryMethod:
                  value: "create{{ domainEntity }}IdentifierBuilder"
              className:
                  value: "{{ domainEntity }}IdentifierBuilder"
              interfaceName:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\IdentifierBuilder\\{{ domainEntity }}IdentifierBuilderInterface"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\IdentifierBuilder\\{{ domainEntity }}IdentifierBuilderInterface"
              subDirectory:
                  value: "{{ domainEntity }}/IdentifierBuilder"
    - AddZedBusinessFactoryMethod:
          arguments:
              factoryMethod:
                  value: "create{{ domainEntity }}CreateValidator"
              className:
                  value: "{{ domainEntity }}Validator"
              interfaceName:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorInterface"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorInterface"
              subDirectory:
                  value: "{{ domainEntity }}/Validator"
              dependencyMethods:
                  value:
                      - "get{{ domainEntity }}CreateValidatorRules"
                      - "get{{ domainEntity }}CreateValidatorRulePlugins"
                      - "create{{ domainEntity }}IdentifierBuilder"
    - AddZedBusinessFactoryMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}CreateValidatorRules"
              className:
                  value: "{{ domainEntity }}Validator"
              interfaceName:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\Rules\\{{ domainEntity }}ValidatorRuleInterface[]"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\Rules\\{{ domainEntity }}ValidatorRuleInterface[]"
              body:
                  value: "return [];"
    - AddZedBusinessFactoryMethod:
          arguments:
              factoryMethod:
                  value: "create{{ domainEntity }}UpdateValidator"
              className:
                  value: "{{ domainEntity }}Validator"
              interfaceName:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorInterface"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorInterface"
              subDirectory:
                  value: "{{ domainEntity }}/Validator"
              dependencyMethods:
                  value:
                      - "get{{ domainEntity }}UpdateValidatorRules"
                      - "get{{ domainEntity }}UpdateValidatorRulePlugins"
                      - "create{{ domainEntity }}IdentifierBuilder"

    - AddZedBusinessFactoryMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}UpdateValidatorRules"
              subDirectory:
                  value: "{{ domainEntity }}/Validator"
              className:
                  value: "{{ domainEntity }}Validator"
              interfaceName:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\Rules\\{{ domainEntity }}ValidatorRuleInterface[]"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\Rules\\{{ domainEntity }}ValidatorRuleInterface[]"
              body:
                  value: "return [];"

    - AddZedBusinessFactoryGetProvidedDependencyMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}ExpanderPlugins"
              constantName:
                  value: "PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_EXPANDER"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\Plugin\\{{ domainEntity }}\\Expander\\{{ domainEntity }}ExpanderPluginInterface[]"
    - AddZedBusinessFactoryGetProvidedDependencyMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}PreCreatePlugins"
              constantName:
                  value: "PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_PRE_CREATE"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\Plugin\\{{ domainEntity }}\\Writer\\{{ domainEntity }}CreatePluginInterface[]"
          excludedSpryks:
              - AddZedDependencyProviderConstant
    - AddZedBusinessFactoryGetProvidedDependencyMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}PostCreatePlugins"
              constantName:
                  value: "PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_POST_CREATE"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\Plugin\\{{ domainEntity }}\\Writer\\{{ domainEntity }}CreatePluginInterface[]"
          excludedSpryks:
              - AddZedDependencyProviderConstant
    - AddZedBusinessFactoryGetProvidedDependencyMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}PreUpdatePlugins"
              constantName:
                  value: "PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_PRE_UPDATE"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\Plugin\\{{ domainEntity }}\\Writer\\{{ domainEntity }}UpdatePluginInterface[]"
          excludedSpryks:
              - AddZedDependencyProviderConstant
    - AddZedBusinessFactoryGetProvidedDependencyMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}PostUpdatePlugins"
              constantName:
                  value: "PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_POST_UPDATE"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\Plugin\\{{ domainEntity }}\\Writer\\{{ domainEntity }}UpdatePluginInterface[]"
          excludedSpryks:
              - AddZedDependencyProviderConstant
    - AddZedBusinessFactoryGetProvidedDependencyMethod:
            arguments:
                factoryMethod:
                    value: "get{{ domainEntity }}CreateValidatorRulePlugins"
                constantName:
                    value: "PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_CREATE_VALIDATOR_RULE"
                output:
                    value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\Plugin\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorRulePluginInterface[]"
            excludedSpryks:
                - AddZedDependencyProviderConstant
    -   AddZedBusinessFactoryGetProvidedDependencyMethod:
            arguments:
                factoryMethod:
                    value: "get{{ domainEntity }}UpdateValidatorRulePlugins"
                constantName:
                    value: "PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_UPDATE_VALIDATOR_RULE"
                output:
                    value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\Plugin\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorRulePluginInterface[]"
            excludedSpryks:
                - AddZedDependencyProviderConstant
    # Add Spy{{ domainEntity }}Query method to persistence factory
    -   AddZedDomainEntityPersistenceFactoryMethod:
            arguments:
                fqcnClassName:
                    value: "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query"
                factoryMethod:
                    value: "create{{ domainEntity }}Query"
                output:
                    value: "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query"
    - AddZedDomainEntityInterfaceMethod:
            arguments:
                className:
                    value: "{{ domainEntity }}IdentifierBuilder"
                subDirectory:
                    value: "{{ domainEntity }}/IdentifierBuilder"
                modelMethod:
                    value: "buildIdentifier"
                input:
                    value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst}}Transfer"
                output:
                    value: "string"
    - AddZedDomainEntityMethod:
        arguments:
            className:
                value: "{{ domainEntity }}IdentifierBuilder"
            subDirectory:
                value: "{{ domainEntity }}/IdentifierBuilder"
            modelMethod:
                value: "buildIdentifier"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst}}Transfer"
            output:
                value: "string"
            body:
                value: "return ${{ domainEntity | lcfirst}}Transfer->getId{{ domainEntity }}() !== null ? (string)${{ domainEntity | lcfirst}}Transfer->getId{{ domainEntity }}() : spl_object_hash(${{ domainEntity | lcfirst}}Transfer);"

    - AddZedBusinessFacadeTest:
        arguments:
            template:
                value: "Zed/Business/CrudFacadeTest.php.twig"
            targetFilename:
                value: "{{ domainEntity }}CrudFacadeTest.php"

    # Add {{ domainEntity }}EntityManager into Persistence layer
    - AddZedPersistenceEntityManagerMethod:
        arguments:
            domainEntity:
                inherit: true
            entityManagerMethod:
                value: "create{{ domainEntity }}"
            body:
                value: Zed/Persistence/EntityManager/DomainEntity/CreateMethod.php.twig
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst }}Transfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer"

    - AddZedPersistenceEntityManagerMethod:
        arguments:
            domainEntity:
                inherit: true
            entityManagerMethod:
                value: "update{{ domainEntity }}"
            body:
                value: Zed/Persistence/EntityManager/DomainEntity/UpdateMethod.php.twig
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst }}Transfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer"

    - AddZedPersistenceEntityManagerMethod:
        arguments:
          domainEntity:
              inherit: true
          entityManagerMethod:
              value: "delete{{ domainEntity }}"
          body:
              value: Zed/Persistence/EntityManager/DomainEntity/DeleteMethod.php.twig
          input:
              value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst }}Transfer"
          output:
              value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer"

    - AddZedPersistenceEntityManagerMethod:
        arguments:
            domainEntity:
                inherit: true
            entityManagerMethod:
                value: "apply{{ domainEntity }}DeleteFilters"
            visibility:
                value: "protected"
            body:
                value: Zed/Persistence/EntityManager/DomainEntity/ApplyDeleteFiltersMethod.php.twig
            input:
                value:
                    - "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query ${{ domainEntity | lcfirst }}Query"
                    - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer"
            output:
                value: "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query"
        excludedSpryks:
            - AddZedPersistenceEntityManagerInterfaceMethod

    #Add "{{ domainEntity }}Mapper" into Persistence layer.
    - AddZedDomainEntity:
          arguments:
              layer:
                  value: Persistence
              className:
                  value: "{{ domainEntity }}Mapper"
              subDirectory:
                  value: "Propel/{{ domainEntity }}/Mapper"
              modelMethod:
                  value: "map{{ domainEntity }}TransferTo{{ domainEntity }}Entity"
          excludedSpryks:
              - AddZedDomainEntityInterface

    - AddZedDomainEntityMethod:
          arguments:
              layer:
                  value: Persistence
              className:
                  value: "{{ domainEntity }}Mapper"
              subDirectory:
                  value: "Propel/{{ domainEntity }}/Mapper"
              modelMethod:
                  value: "map{{ domainEntity }}TransferTo{{ domainEntity }}Entity"
              input:
                  value:
                      - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst }}Transfer"
                      - "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }} ${{ domainEntity | lcfirst }}Entity"
              output:
                  value: "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}"
              body:
                  value: "return ${{ domainEntity | lcfirst }}Entity->fromArray(${{ domainEntity | lcfirst }}Transfer->modifiedToArray());"
          excludedSpryks:
              - AddZedDomainEntityInterfaceMethod
              - AddZedDomainEntityInterface
              - AddZedDomainEntity

    - AddZedDomainEntityMethod:
        arguments:
            layer:
                value: Persistence
            className:
                value: "{{ domainEntity }}Mapper"
            subDirectory:
                value: "Propel/{{ domainEntity }}/Mapper"
            modelMethod:
                value: "map{{ domainEntity }}EntityTo{{ domainEntity }}Transfer"
            input:
                value:
                    - "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }} ${{ domainEntity | lcfirst }}Entity"
                    - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst }}Transfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer"
            body:
                value: "return ${{ domainEntity | lcfirst }}Transfer->fromArray(${{ domainEntity | lcfirst }}Entity->toArray(), true);"
        excludedSpryks:
            - AddZedDomainEntityInterfaceMethod
            - AddZedDomainEntityInterface
            - AddZedDomainEntity

    - AddZedDomainEntityMethod:
        arguments:
            layer:
                value: Persistence
            className:
                value: "{{ domainEntity }}Mapper"
            subDirectory:
                value: "Propel/{{ domainEntity }}/Mapper"
            modelMethod:
                value: "map{{ domainEntity }}EntityCollectionTo{{ domainEntity }}CollectionResponseTransfer"
            input:
                value:
                    - "\\Propel\\Runtime\\Collection\\ObjectCollection|\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}[] ${{ domainEntity | lcfirst }}EntityCollection"
                    - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer ${{ domainEntity | lcfirst }}CollectionResponseTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"
            body:
                value:
                    - "foreach (${{ domainEntity | lcfirst }}EntityCollection as ${{ domainEntity | lcfirst }}Entity) {"
                    - "    ${{ domainEntity | lcfirst }}CollectionResponseTransfer->add{{ domainEntity }}($this->map{{ domainEntity }}EntityTo{{ domainEntity }}Transfer(${{ domainEntity | lcfirst }}Entity, new {{ domainEntity }}Transfer()));"
                    - "}"
                    - ""
                    - "return ${{ domainEntity | lcfirst }}CollectionResponseTransfer;"
        excludedSpryks:
            - AddZedDomainEntityInterfaceMethod
            - AddZedDomainEntityInterface
            - AddZedDomainEntity

    -  AddZedDomainEntityMethod:
            arguments:
                layer:
                    value: Persistence
                className:
                    value: "{{ domainEntity }}Mapper"
                subDirectory:
                    value: "Propel/{{ domainEntity }}/Mapper"
                modelMethod:
                    value: "map{{ domainEntity }}EntityCollectionTo{{ domainEntity }}CollectionTransfer"
                input:
                    value:
                        - "\\Propel\\Runtime\\Collection\\ObjectCollection|\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}[] ${{ domainEntity | lcfirst }}EntityCollection"
                        - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionTransfer ${{ domainEntity | lcfirst }}CollectionTransfer"
                output:
                    value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionTransfer"
                body:
                    value:
                        - "foreach (${{ domainEntity | lcfirst }}EntityCollection as ${{ domainEntity | lcfirst }}Entity) {"
                        - "    ${{ domainEntity | lcfirst }}CollectionTransfer->add{{ domainEntity }}($this->map{{ domainEntity }}EntityTo{{ domainEntity }}Transfer(${{ domainEntity | lcfirst }}Entity, new {{ domainEntity }}Transfer()));"
                        - "}"
                        - ""
                        - "return ${{ domainEntity | lcfirst }}CollectionTransfer;"
            excludedSpryks:
                - AddZedDomainEntityInterfaceMethod
                - AddZedDomainEntityInterface
                - AddZedDomainEntity

    - AddZedDomainEntityPersistenceFactoryMethod:
        arguments:
            application:
                value: "Zed"
            fqcnClassName:
                value: "\\{{ organization }}\\{{ application }}\\{{ module }}\\Persistence\\Propel\\{{ domainEntity }}\\Mapper\\{{ domainEntity }}Mapper"
            factoryMethod:
                value: "create{{ domainEntity }}Mapper"
            output:
                value: "\\{{ organization }}\\{{ application }}\\{{ module }}\\Persistence\\Propel\\{{ domainEntity }}\\Mapper\\{{ domainEntity }}Mapper"
            body:
                value: "return new \\{{ organization }}\\{{ application }}\\{{ module }}\\Persistence\\Propel\\{{ domainEntity }}\\Mapper\\{{ domainEntity }}Mapper();"
