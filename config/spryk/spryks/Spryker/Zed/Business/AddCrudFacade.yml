spryk: wrapper
description: "Adds CRUD code for a Domain Entity."
priority: 1
mode: both
level: 2

arguments:
    organization:
        inherit: true
        default: Spryker

    module:
        inherit: true

    domainEntity: ~

excludedSpryks:
    - AddZedPresentationTwig
    - AddZedNavigationNode

preSpryks:
    - AddModule

postSpryks:
    - AddZedDomainEntityDeleter
    - AddZedDomainEntityCreator
    - AddZedDomainEntityReader
    - AddZedDomainEntityUpdater
    - AddDomainEntityValidator
    # Add transfers
    - AddSharedDomainEntityFetchingTransferDefinition
    - AddSharedDomainEntityManipulationTransferDefinition
    # Add test helper
    - AddDomainEntityTestHelper
    - AddZedPersistenceRepositoryMethod:
        arguments:
            repositoryMethod:
                value: "get{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CriteriaTransfer ${{ domainEntity | lcfirst }}CriteriaTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionTransfer"
            domainEntity:
                inherit: true
            body:
                value: Zed/Persistence/Repository/DomainEntity/GetCollectionMethod.php.twig
    - AddZedPersistenceRepositoryProtectedMethod:
        arguments:
            repositoryMethod:
                value: "apply{{ domainEntity }}Filters"
            input:
                value:
                    - "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query ${{ domainEntity | lcfirst }}Query"
                    - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CriteriaTransfer ${{ domainEntity | lcfirst }}CriteriaTransfer"
            output:
                value: "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query"
            domainEntity:
                inherit: true
            body:
                value: Zed/Persistence/Repository/DomainEntity/ApplyFiltersMethod.php.twig
    - AddZedPersistenceRepositoryMethod:
        arguments:
            repositoryMethod:
                value: "has{{ domainEntity }}"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CriteriaTransfer ${{ domainEntity | lcfirst }}CriteriaTransfer"
            output:
                value: "bool"
            domainEntity:
                inherit: true
            body:
                value: Zed/Persistence/Repository/DomainEntity/HasMethod.php.twig
    - AddZedPersistenceRepositoryMethod:
        arguments:
            repositoryMethod:
                value: "get{{ domainEntity }}DeleteCollection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionTransfer"
            domainEntity:
                inherit: true
            body:
                value: Zed/Persistence/Repository/DomainEntity/GetDeleteCollectionMethod.php.twig
    - AddZedPersistenceRepositoryProtectedMethod:
        arguments:
            repositoryMethod:
                value: "applyEntityPagination"
            input:
                value:
                    - "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query ${{ domainEntity | lcfirst }}Query"
                    - "\\Generated\\Shared\\Transfer\\PaginationTransfer $paginationTransfer"
            output:
                value: "\\Propel\\Runtime\\Collection\\ObjectCollection"
            domainEntity:
                inherit: true
            body:
                value: Zed/Persistence/Repository/DomainEntity/ApplyPagination.php.twig
    - AddZedPersistenceRepositoryProtectedMethod:
          arguments:
              repositoryMethod:
                  value: "applyEntitySorting"
              input:
                  value:
                      - "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query ${{ domainEntity | lcfirst }}Query"
                      - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CriteriaTransfer ${{ domainEntity | lcfirst }}CriteriaTransfer"
              output:
                  value: "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query"
              domainEntity:
                  inherit: true
              body:
                  value: Zed/Persistence/Repository/DomainEntity/ApplySorting.php.twig
    - AddZedPersistenceRepositoryProtectedMethod:
        arguments:
            repositoryMethod:
                value: "apply{{ domainEntity }}DeleteFilters"
            input:
                value:
                    - "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query ${{ domainEntity | lcfirst }}Query"
                    - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer"
            output:
                value: "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query"
            domainEntity:
                inherit: true
            body:
                value: Zed/Persistence/Repository/DomainEntity/ApplyDeleteFiltersMethod.php.twig
    - AddZedBusinessFacadeInterfaceMethod:
          arguments:
              facadeMethod:
                  value: "get{{ domainEntity }}Collection"
              input:
                  value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CriteriaTransfer ${{ domainEntity | lcfirst }}CriteriaTransfer"
              output:
                  value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionTransfer"
              specification:
                  value:
                      - "- Fetches collection of {{ domainEntity | pluralize }} from the storage."
              annotations:
                  value:
                      - ""
                      - "@api"
    - AddZedBusinessFacadeMethod:
        arguments:
            facadeMethod:
                value: "get{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CriteriaTransfer ${{ domainEntity | lcfirst }}CriteriaTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionTransfer"
            body:
                value: "return $this->getFactory()->create{{ domainEntity }}Reader()->get{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CriteriaTransfer);"
    -  AddZedBusinessFacadeInterfaceMethod:
        arguments:
            facadeMethod:
                value: "create{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"
            specification:
                value:
                    - "- Stores collection of {{ domainEntity | pluralize }} to the storage."
            annotations:
                value:
                    - ""
                    - "@api"
    - AddZedBusinessFacadeMethod:
        arguments:
            facadeMethod:
                value: "create{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"
            body:
                value: "return $this->getFactory()->create{{ domainEntity }}Creator()->create{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);"
    - AddZedBusinessFacadeInterfaceMethod:
        arguments:
            facadeMethod:
                value: "update{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"
            specification:
                value:
                    - "- Updates collection of {{ domainEntity | pluralize }} in the storage."
            annotations:
                value:
                    - ""
                    - "@api"
    - AddZedBusinessFacadeMethod:
        arguments:
            facadeMethod:
                value: "update{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionRequestTransfer ${{ domainEntity | lcfirst }}CollectionRequestTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"
            body:
                value: "return $this->getFactory()->create{{ domainEntity }}Updater()->update{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionRequestTransfer);"
    - AddZedBusinessFacadeInterfaceMethod:
        arguments:
            facadeMethod:
                value: "delete{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"
            specification:
                value:
                    - "- Removes collection of {{ domainEntity | pluralize }} from the storage."
            annotations:
                value:
                    - ""
                    - "@api"
    - AddZedBusinessFacadeMethod:
        arguments:
            facadeMethod:
                value: "delete{{ domainEntity }}Collection"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"
            body:
                value: "return $this->getFactory()->create{{ domainEntity }}Deleter()->delete{{ domainEntity }}Collection(${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer);"
    # Add add{{ domainEntity }}CreatePreSavePlugins, get{{ domainEntity }}CreatePreSavePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}CreatePreSave"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}SavePluginInterface[]"

    # Add add{{ domainEntity }}CreatePostSavePlugins, get{{ domainEntity }}CreatePostSavePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}CreatePostSave"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}SavePluginInterface[]"

    # Add add{{ domainEntity }}UpdatePreSavePlugins, get{{ domainEntity }}UpdatePreSavePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}UpdatePreSave"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}SavePluginInterface[]"

    # Add add{{ domainEntity }}UpdatePostSavePlugins, get{{ domainEntity }}UpdatePostSavePlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}UpdatePostSave"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}SavePluginInterface[]"

    # Add add{{ domainEntity }}ExpanderPlugins, get{{ domainEntity }}ExpanderPlugins and const for the plugins to the DependencyProvider
    - AddZedDependencyPlugins:
          arguments:
              type:
                  value: "{{ domainEntity }}Expander"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Expander\\{{ domainEntity }}ExpanderPluginInterface[]"

    # Creates {{ domainEntity }}ExpanderPluginInterface
    - AddDomainEntityExtensionInterfaceMethod:
          arguments:
              className:
                  value: "{{ domainEntity }}ExpanderPlugin"
              subDirectory:
                  value: "{{ domainEntity }}/Expander"
              modelMethod:
                  value: "expand"
              input:
                  value: "\\ArrayObject|\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[] ${{ domainEntity | lcfirst }}Transfers"
              output:
                  value: "\\ArrayObject|\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[]"

    # Creates {{ domainEntity }}SavePluginInterface
    - AddDomainEntityExtensionInterfaceMethod:
          arguments:
              className:
                  value: "{{ domainEntity }}SavePlugin"
              subDirectory:
                  value: "{{ domainEntity }}/Saver"
              modelMethod:
                  value: "process"
              input:
                  value: "\\ArrayObject|\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[] ${{ domainEntity | lcfirst }}Transfers"
              output:
                  value: "\\ArrayObject|\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer[]"

    # Creates {{ domainEntity }}ValidatorRulePluginInterface
    - AddDomainEntityExtensionInterfaceMethod:
          arguments:
              className:
                  value: "{{ domainEntity }}ValidatorRulePlugin"
              subDirectory:
                  value: "{{ domainEntity }}/Validator"
              modelMethod:
                  value: "validate"
              input:
                  value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst }}Transfer"
              output:
                  value: "array"
    -   AddZedPersistencePropelSchemaProperty:
              arguments:
                  name:
                      value: "spy_{{ module | underscored }}"
                  propertyName:
                      value: "id_{{ domainEntity | underscored }}"
                  propertyType:
                      value: "INTEGER"
                  required:
                      value: "true"
                  autoIncrement:
                      value: "true"
                  primaryKey:
                    value: "true"
    # Add is_active property to "spy_{{ module }}" entity of the Persistence layer.
    -   AddZedPersistencePropelSchemaProperty:
              arguments:
                  name:
                      value: "spy_{{ module | underscored }}"
                  propertyName:
                      value: "is_active"
                  propertyType:
                      value: "BOOLEAN"
    # Add add{{ domainEntity }}DataBuilderDefinition for the tests transfer builder
    -   AddDataBuilderDefinition:
            arguments:
                name:
                    value: "{{ domainEntity }}"
    - AddZedBusinessFactoryMethod:
          arguments:
              factoryMethod:
                  value: "create{{ domainEntity }}IdentifierBuilder"
              className:
                  value: "{{ domainEntity }}IdentifierBuilder"
              interfaceName:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\IdentifierBuilder\\{{ domainEntity }}IdentifierBuilderInterface"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\IdentifierBuilder\\{{ domainEntity }}IdentifierBuilderInterface"
              subDirectory:
                  value: "{{ domainEntity }}/IdentifierBuilder"
    - AddZedBusinessFactoryMethod:
          arguments:
              factoryMethod:
                  value: "create{{ domainEntity }}CreateValidator"
              className:
                  value: "{{ domainEntity }}Validator"
              interfaceName:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorInterface"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorInterface"
              subDirectory:
                  value: "{{ domainEntity }}/Validator"
              dependencyMethods:
                  value:
                      - "get{{ domainEntity }}CreateValidatorRules"
                      - "get{{ domainEntity }}CreateValidatorRulePlugins"
                      - "create{{ domainEntity }}IdentifierBuilder"
    - AddZedBusinessFactoryMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}CreateValidatorRules"
              className:
                  value: "{{ domainEntity }}Validator"
              interfaceName:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorRuleInterface[]"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorRuleInterface[]"
              body:
                  value: "return [];"
    - AddZedBusinessFactoryMethod:
          arguments:
              factoryMethod:
                  value: "create{{ domainEntity }}UpdateValidator"
              className:
                  value: "{{ domainEntity }}Validator"
              interfaceName:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorInterface"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorInterface"
              subDirectory:
                  value: "{{ domainEntity }}/Validator"
              dependencyMethods:
                  value:
                      - "get{{ domainEntity }}UpdateValidatorRules"
                      - "get{{ domainEntity }}UpdateValidatorRulePlugins"
                      - "create{{ domainEntity }}IdentifierBuilder"

    - AddZedBusinessFactoryMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}UpdateValidatorRules"
              subDirectory:
                  value: "{{ domainEntity }}/Validator"
              className:
                  value: "{{ domainEntity }}Validator"
              interfaceName:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorRuleInterface[]"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Business\\{{ domainEntity }}\\Validator\\{{ domainEntity }}ValidatorRuleInterface[]"
              body:
                  value: "return [];"
    - AddZedBusinessFactoryGetProvidedDependencyMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}ExpanderPlugins"
              constantName:
                  value: "PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_EXPANDER"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Expander\\{{ domainEntity }}ExpanderPluginInterface[]"
    - AddZedBusinessFactoryGetProvidedDependencyMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}PreCreatePlugins"
              constantName:
                  value: "PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_PRE_CREATE"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}SavePluginInterface[]"
    - AddZedBusinessFactoryGetProvidedDependencyMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}PostCreatePlugins"
              constantName:
                  value: "PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_POST_CREATE"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}SavePluginInterface[]"
    - AddZedBusinessFactoryGetProvidedDependencyMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}PreUpdatePlugins"
              constantName:
                  value: "PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_PRE_UPDATE"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}SavePluginInterface[]"
    - AddZedBusinessFactoryGetProvidedDependencyMethod:
          arguments:
              factoryMethod:
                  value: "get{{ domainEntity }}PostUpdatePlugins"
              constantName:
                  value: "PLUGINS_{{ domainEntity | camelCaseToUnderscore | upper }}_POST_UPDATE"
              output:
                  value: "\\{{ organization }}\\Zed\\{{ module }}Extension\\Dependency\\{{ domainEntity }}\\Saver\\{{ domainEntity }}SavePluginInterface[]"
    # Add Spy{{ domainEntity }}Query method to persistence factory
    -   AddZedDomainEntityPersistenceFactoryMethod:
            arguments:
                fqcnClassName:
                    value: "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query"
                factoryMethod:
                    value: "create{{ domainEntity }}Query"
                output:
                    value: "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query"
    - AddZedDomainEntityInterfaceMethod:
            arguments:
                className:
                    value: "{{ domainEntity }}IdentifierBuilder"
                subDirectory:
                    value: "{{ domainEntity }}/IdentifierBuilder"
                modelMethod:
                    value: "buildIdentifier"
                input:
                    value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst}}Transfer"
                output:
                    value: "string"
    - AddZedDomainEntityMethod:
        arguments:
            className:
                value: "{{ domainEntity }}IdentifierBuilder"
            subDirectory:
                value: "{{ domainEntity }}/IdentifierBuilder"
            modelMethod:
                value: "buildIdentifier"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst}}Transfer"
            output:
                value: "string"
            body:
                value: "return ${{ domainEntity | lcfirst}}Transfer->getId{{ domainEntity }}();"

    - AddZedBusinessFacadeTest:
        arguments:
            template:
                value: "Zed/Business/CrudFacadeTest.php.twig"
            targetFilename:
                value: "{{ domainEntity }}CrudFacadeTest.php"

    # Add {{ domainEntity }}EntityManager into Persistence layer
    - AddZedPersistenceEntityManagerMethod:
        arguments:
            domainEntity:
                inherit: true
            entityManagerMethod:
                value: "create{{ domainEntity }}"
            body:
                value: Zed/Persistence/EntityManager/DomainEntity/CreateMethod.php.twig
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst }}Transfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer"

    - AddZedPersistenceEntityManagerMethod:
        arguments:
          domainEntity:
              inherit: true
          entityManagerMethod:
              value: "delete{{ domainEntity }}"
          body:
              value: Zed/Persistence/EntityManager/DomainEntity/DeleteMethod.php.twig
          input:
              value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer"
          output:
              value: "void"

    - AddZedPersistenceEntityManagerMethod:
        arguments:
            domainEntity:
                inherit: true
            entityManagerMethod:
                value: "set{{ domainEntity }}IsActiveFalse"
            input:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer"
            output:
                value: "void"
            body:
                value: Zed/Persistence/EntityManager/DomainEntity/SetIsActiveFalseMethod.php.twig

    - AddZedPersistenceEntityManagerProtectedMethod:
        arguments:
            domainEntity:
                inherit: true
            entityManagerMethod:
                value: "apply{{ domainEntity }}DeleteFilters"
            body:
                value: Zed/Persistence/EntityManager/DomainEntity/ApplyDeleteFiltersMethod.php.twig
            input:
                value:
                    - "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query ${{ module | lcfirst }}Query"
                    - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionDeleteCriteriaTransfer ${{ domainEntity | lcfirst }}CollectionDeleteCriteriaTransfer"
            output:
                value: "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}Query"

    #Add "{{ domainEntity }}Mapper" into Persistence layer.
    - AddZedDomainEntityInterfaceMethod:
          arguments:
              layer:
                  value: Persistence
              className:
                  value: "{{ domainEntity }}Mapper"
              subDirectory:
                  value: "Propel/Mapper"
              modelMethod:
                  value: "map{{ domainEntity }}TransferTo{{ domainEntity }}Entity"
              input:
                  value:
                      - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst }}Transfer"
                      - "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }} ${{ domainEntity | lcfirst }}Entity"
              output:
                  value: "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}"
    - AddZedDomainEntityMethod:
          arguments:
              layer:
                  value: Persistence
              className:
                  value: "{{ domainEntity }}Mapper"
              subDirectory:
                  value: "Propel/Mapper"
              modelMethod:
                  value: "map{{ domainEntity }}TransferTo{{ domainEntity }}Entity"
              input:
                  value:
                      - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst }}Transfer"
                      - "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }} ${{ domainEntity | lcfirst }}Entity"
              output:
                  value: "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}"
              body:
                  value: "return ${{ domainEntity | lcfirst }}Entity->fromArray(${{ domainEntity | lcfirst }}Transfer->modifiedToArray());"

    - AddZedDomainEntityInterfaceMethod:
          arguments:
              layer:
                  value: Persistence
              className:
                  value: "{{ domainEntity }}Mapper"
              subDirectory:
                  value: "Propel/Mapper"
              modelMethod:
                  value: "map{{ domainEntity }}EntityTo{{ domainEntity }}Transfer"
              input:
                  value:
                      - "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }} ${{ domainEntity | lcfirst }}Entity"
                      - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst }}Transfer"
              output:
                  value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer"

    - AddZedDomainEntityMethod:
        arguments:
            layer:
                value: Persistence
            className:
                value: "{{ domainEntity }}Mapper"
            subDirectory:
                value: "Propel/Mapper"
            modelMethod:
                value: "map{{ domainEntity }}EntityTo{{ domainEntity }}Transfer"
            input:
                value:
                    - "\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }} ${{ domainEntity | lcfirst }}Entity"
                    - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst }}Transfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}Transfer"
            body:
                value: "return ${{ domainEntity | lcfirst }}Transfer->fromArray(${{ domainEntity | lcfirst }}Entity->toArray(), true);"

    - AddZedDomainEntityInterfaceMethod:
          arguments:
              layer:
                  value: Persistence
              className:
                  value: "{{ domainEntity }}Mapper"
              subDirectory:
                  value: "Propel/Mapper"
              modelMethod:
                  value: "map{{ domainEntity }}EntityCollectionTo{{ domainEntity }}CollectionResponseTransfer"
              input:
                  value:
                      - "\\Propel\\Runtime\\Collection\\ObjectCollection|\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}[] ${{ domainEntity | lcfirst }}EntityCollection"
                      - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer ${{ domainEntity | lcfirst }}CollectionResponseTransfer"
              output:
                  value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"

    - AddZedDomainEntityMethod:
        arguments:
            layer:
                value: Persistence
            className:
                value: "{{ domainEntity }}Mapper"
            subDirectory:
                value: "Propel/Mapper"
            modelMethod:
                value: "map{{ domainEntity }}EntityCollectionTo{{ domainEntity }}CollectionResponseTransfer"
            input:
                value:
                    - "\\Propel\\Runtime\\Collection\\ObjectCollection|\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}[] ${{ domainEntity | lcfirst }}EntityCollection"
                    - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer ${{ domainEntity | lcfirst }}CollectionResponseTransfer"
            output:
                value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionResponseTransfer"
            body:
                value:
                    - "foreach (${{ domainEntity | lcfirst }}EntityCollection as ${{ domainEntity | lcfirst }}Entity) {"
                    - "    ${{ domainEntity | lcfirst }}CollectionResponseTransfer->add{{ domainEntity }}($this->map{{ domainEntity }}EntityTo{{ domainEntity }}Transfer(${{ domainEntity | lcfirst }}Entity, new {{ domainEntity }}Transfer()));"
                    - "}"
                    - ""
                    - "return ${{ domainEntity | lcfirst }}CollectionResponseTransfer;"

    -   AddZedDomainEntityInterfaceMethod:
            arguments:
                layer:
                    value: Persistence
                className:
                    value: "{{ domainEntity }}Mapper"
                subDirectory:
                    value: "Propel/Mapper"
                modelMethod:
                    value: "map{{ domainEntity }}EntityCollectionTo{{ domainEntity }}CollectionTransfer"
                input:
                    value:
                        - "\\Propel\\Runtime\\Collection\\ObjectCollection|\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}[] ${{ domainEntity | lcfirst }}EntityCollection"
                        - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionTransfer ${{ domainEntity | lcfirst }}CollectionTransfer"
                output:
                    value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionTransfer"

    -   AddZedDomainEntityMethod:
            arguments:
                layer:
                    value: Persistence
                className:
                    value: "{{ domainEntity }}Mapper"
                subDirectory:
                    value: "Propel/Mapper"
                modelMethod:
                    value: "map{{ domainEntity }}EntityCollectionTo{{ domainEntity }}CollectionTransfer"
                input:
                    value:
                        - "\\Propel\\Runtime\\Collection\\ObjectCollection|\\Orm\\Zed\\{{ module }}\\Persistence\\Spy{{ domainEntity }}[] ${{ domainEntity | lcfirst }}EntityCollection"
                        - "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionTransfer ${{ domainEntity | lcfirst }}CollectionTransfer"
                output:
                    value: "\\Generated\\Shared\\Transfer\\{{ domainEntity }}CollectionTransfer"
                body:
                    value:
                        - "foreach (${{ domainEntity | lcfirst }}EntityCollection as ${{ domainEntity | lcfirst }}Entity) {"
                        - "    ${{ domainEntity | lcfirst }}CollectionTransfer->add{{ domainEntity }}($this->map{{ domainEntity }}EntityTo{{ domainEntity }}Transfer(${{ domainEntity | lcfirst }}Entity, new {{ domainEntity }}Transfer()));"
                        - "}"
                        - ""
                        - "return ${{ domainEntity | lcfirst }}CollectionTransfer;"

    - AddZedDomainEntityPersistenceFactoryMethod:
        arguments:
            application:
                value: "Zed"
            fqcnClassName:
                value: "\\{{ organization }}\\{{ application }}\\{{ module }}\\Persistence\\Propel\\Mapper\\{{ domainEntity }}Mapper"
            factoryMethod:
                value: "create{{ domainEntity }}Mapper"
            output:
                value: "\\{{ organization }}\\{{ application }}\\{{ module }}\\Persistence\\Propel\\Mapper\\{{ domainEntity }}MapperInterface"
            body:
                value: "return new \\{{ organization }}\\{{ application }}\\{{ module }}\\Persistence\\Propel\\Mapper\\{{ domainEntity }}Mapper();"
    - AddConstant:
          arguments:
              name:
                  value: "SORT_DESC"
              value:
                  value: "desc"
              visibility:
                  value: "public"
              target:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Persistence\\{{module}}Repository"

    - AddConstant:
          arguments:
              name:
                  value: "SORT_ASC"
              value:
                  value: "asc"
              visibility:
                  value: "public"
              target:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Persistence\\{{module}}Repository"

    - AddConstant:
          arguments:
              name:
                  value: "OPERATOR_AND"
              value:
                  value: "and"
              visibility:
                  value: "public"
              target:
                  value: "\\{{ organization }}\\Zed\\{{ module }}\\Persistence\\{{module}}Repository"
